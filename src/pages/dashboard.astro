---
import Layout from '../layouts/layout.astro';

const topics = [
  {id: 1, name: "Fables", icon: "📚", category: "literature"},
  {id: 2, name: "Events", icon: "📅", category: "social"},
  {id: 3, name: "Music", icon: "🎵", category: "arts"},
  {id: 4, name: "Places", icon: "🏛️", category: "geography"},
  {id: 5, name: "Food", icon: "🍽️", category: "culture"},
  {id: 6, name: "People", icon: "👥", category: "social"},
  {id: 7, name: "Literature", icon: "📖", category: "literature"},
  {id: 8, name: "Architecture", icon: "🏗️", category: "culture"},
  {id: 9, name: "Skills", icon: "⚡", category: "education"},
  {id: 10, name: "Images", icon: "🖼️", category: "media"},
  {id: 11, name: "Culture", icon: "🎭", category: "culture"},
  {id: 12, name: "Flora & fauna", icon: "🌿", category: "nature"},
  {id: 13, name: "Education", icon: "🎓", category: "education"},
  {id: 14, name: "Vegetation", icon: "🌱", category: "nature"}
];

const mediaTypes = [
  {id: 1, name: "Audio", icon: "🎙️", description: "Upload or record audio for this topic"},
  {id: 2, name: "Image", icon: "📷", description: "Upload images for this topic"},
  {id: 3, name: "Video", icon: "🎥", description: "Upload or record video for this topic"},
  {id: 4, name: "Text", icon: "📝", description: "Write text for this topic"}
];

const userStats = {
  hoursOfVoice: 0,
  creditScore: 0
};
---
<Layout>
<div id="dashboard-screen" class="screen">
  <!-- Side Navigation Overlay -->
  <div id="side-nav-overlay" class="side-nav-overlay"></div>
  
  <!-- Side Navigation Menu -->
  <div id="side-nav" class="side-nav">
    <div class="side-nav-header">
      <button id="close-nav" class="close-nav-btn">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M18 6L6 18M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>
    <nav class="side-nav-content">
      <a href="#" data-nav="dashboard" class="nav-item active">
        <span class="nav-icon">📊</span>
        <span>Dashboard</span>
      </a>
      <a href="#" data-nav="recordings" class="nav-item">
        <span class="nav-icon">🎙️</span>
        <span>My Uploads</span>
      </a>
      <a href="#" data-nav="profile" class="nav-item">
        <span class="nav-icon">👤</span>
        <span>Profile</span>
      </a>
      <a href="#" data-nav="feedback" class="nav-item">
        <span class="nav-icon">💬</span>
        <span>Feedback</span>
      </a>
      <a href="#" data-nav="faqs" class="nav-item">
        <span class="nav-icon">❓</span>
        <span>FAQs</span>
      </a>
      <a href="#" data-nav="help" class="nav-item">
        <span class="nav-icon">📋</span>
        <span>Help</span>
      </a>
      <a href="#" data-nav="logout" class="nav-item logout">
        <span class="nav-icon">🚪</span>
        <span>Logout</span>
      </a>
    </nav>
  </div>

  <!-- Main Dashboard Content -->
  <div class="dashboard-container">
    <!-- Header -->
    <header class="dashboard-header">
      <div class="header-left">
        <button id="menu-toggle" class="menu-toggle">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M3 12h18M3 6h18M3 18h18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
        <h1 class="dashboard-title">తెలుగు భాష పంపుడు</h1>
      </div>
      <div class="header-right">
        <div class="user-profile" id="user-profile">
          <svg width="32" height="32" viewBox="0 0 80 80" fill="none">
            <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
            <circle cx="40" cy="30" r="12" fill="#fff"/>
            <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
          </svg>
        </div>
      </div>
    </header>

    <!-- User Stats -->
    <div class="user-stats">
      <div class="stat-item">
        <span class="stat-label">Hours of voice</span>
        <span class="stat-value" id="hours-value">{userStats.hoursOfVoice}</span>
      </div>
      <div class="stat-item">
        <span class="stat-label">Credit score</span>
        <span class="stat-value" id="credit-value">{userStats.creditScore}</span>
      </div>
    </div>

    <!-- Main Dashboard Content -->
    <main class="dashboard-main">
      <!-- Main Dashboard View -->
      <div id="dashboard-view" class="dashboard-view active">
        <div class="prompt-section">
          <h2 class="prompt-title">What do you want to contribute?</h2>
          <p class="prompt-subtitle">Select a category to contribute content</p>
        </div>

        <div class="topics-grid">
          {topics.map(topic => (
            <button class="topic-card" data-topic={topic.name.toLowerCase().replace(/\s+/g, '-')}>
              <span class="topic-icon">{topic.icon}</span>
              <span class="topic-name">{topic.name}</span>
            </button>
          ))}
        </div>
      </div>

      <!-- Topic Detail View -->
      <div id="topic-detail-view" class="topic-detail-view">
        <div class="topic-header">
          <button id="back-to-dashboard" class="back-button">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
              <path d="M19 12H5M12 19l-7-7 7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <span>Back</span>
          </button>
          <h2 id="selected-topic-title" class="selected-topic-title">Selected Topic</h2>
        </div>
        
        <p class="topic-instruction">Choose how you want to contribute:</p>
        
        <div class="media-options-grid">
          {mediaTypes.map(media => (
            <button class="media-option-card" data-media-type={media.name.toLowerCase()}>
              <span class="media-icon">{media.icon}</span>
              <span class="media-name">{media.name}</span>
              <span class="media-description">{media.description}</span>
            </button>
          ))}
        </div>

        <!-- File Upload Interface (Universal for all media types) -->
        <div id="file-upload-interface" class="media-interface hidden">
          <div class="upload-container">
            <div class="upload-zone" id="upload-zone">
              <div class="upload-icon">
                <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M17 8l-5-5-5 5M12 3v12" stroke="currentColor" stroke-width="2"/>
                </svg>
              </div>
              <p class="upload-text">Click to select files or drag and drop</p>
              <p class="upload-subtitle" id="upload-subtitle">Select files to upload</p>
              <input type="file" id="file-input" multiple class="hidden">
            </div>
            
            <div class="file-preview" id="file-preview"></div>
            
            <div class="upload-actions">
              <button id="upload-selected-files" class="btn btn--primary upload-btn hidden">
                Upload Selected Files
              </button>
              <button id="clear-selection" class="btn btn--secondary clear-btn hidden">
                Clear Selection
              </button>
            </div>
          </div>
        </div>

        <!-- Recording Interface (for Audio/Video recording option) -->
        <div id="recording-interface" class="recording-interface hidden">
          <div class="recording-controls">
            <button id="record-button" class="record-button">
              <svg width="32" height="32" viewBox="0 0 24 24" fill="none">
                <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z" fill="currentColor"/>
                <path d="M19 10v2a7 7 0 0 1-14 0v-2M12 19v4M8 23h8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
            <div class="recording-info">
              <p class="record-instruction">Tap to start recording</p>
              <div class="recording-timer" id="recording-timer">00:00</div>
            </div>
          </div>
          <div class="recording-actions">
            <button id="upload-recording" class="upload-button hidden">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M17 8l-5-5-5 5M12 3v12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              <span>Upload Recording</span>
            </button>
            <button id="discard-recording" class="btn btn--secondary hidden">
              Discard
            </button>
          </div>
        </div>

        <!-- Text Interface -->
        <div id="text-interface" class="media-interface hidden">
          <div class="text-container">
            <textarea id="text-input" class="text-input" placeholder="Write your text here in Telugu or English..." rows="6"></textarea>
            <div class="text-actions">
              <button id="submit-text" class="btn btn--primary">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <path d="M5 12h14M12 5l7 7-7 7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span>Submit Text</span>
              </button>
              <button id="clear-text" class="btn btn--secondary">
                Clear
              </button>
            </div>
            <p class="text-instruction">Write your contribution in Telugu or English</p>
          </div>
        </div>
      </div>

      <!-- Upload Progress Modal -->
      <div id="upload-modal" class="upload-modal hidden">
        <div class="upload-modal-content">
          <div class="upload-progress">
            <div class="progress-circle">
              <svg width="60" height="60" viewBox="0 0 60 60">
                <circle cx="30" cy="30" r="25" fill="none" stroke="#e0e0e0" stroke-width="4"/>
                <circle id="progress-circle" cx="30" cy="30" r="25" fill="none" stroke="#2196F3" stroke-width="4" stroke-linecap="round" transform="rotate(-90 30 30)"/>
              </svg>
              <div class="progress-percentage" id="progress-percentage">0%</div>
            </div>
            <h3 id="upload-status">Uploading...</h3>
            <p id="upload-message">Please wait while we save your contribution</p>
          </div>
        </div>
      </div>
    </main>
  </div>
</div>

<script is:inline>
// Enhanced Dashboard with File Upload Support
const BASE_URL = 'https://backend2.swecha.org/api/v1';

document.addEventListener('DOMContentLoaded', () => {
  const dashboardScreen = document.getElementById('dashboard-screen');
  if (!dashboardScreen) return;

  // Global variables
  let currentTopic = '';
  let currentMediaType = '';
  let selectedFiles = [];
  let isRecording = false;
  let mediaRecorder = null;
  let recordedChunks = [];

  // Dashboard elements
  const dashboardElements = {
    menuToggle: document.getElementById('menu-toggle'),
    sideNav: document.getElementById('side-nav'),
    sideNavOverlay: document.getElementById('side-nav-overlay'),
    closeNav: document.getElementById('close-nav'),
    userProfile: document.getElementById('user-profile'),
    topicCards: document.querySelectorAll('.topic-card'),
    navItems: document.querySelectorAll('.nav-item'),
    dashboardView: document.getElementById('dashboard-view'),
    topicDetailView: document.getElementById('topic-detail-view'),
    backToDashboard: document.getElementById('back-to-dashboard'),
    selectedTopicTitle: document.getElementById('selected-topic-title'),
    mediaOptionCards: document.querySelectorAll('.media-option-card'),
    fileUploadInterface: document.getElementById('file-upload-interface'),
    recordingInterface: document.getElementById('recording-interface'),
    textInterface: document.getElementById('text-interface'),
    uploadZone: document.getElementById('upload-zone'),
    fileInput: document.getElementById('file-input'),
    filePreview: document.getElementById('file-preview'),
    uploadSelectedFiles: document.getElementById('upload-selected-files'),
    clearSelection: document.getElementById('clear-selection'),
    recordButton: document.getElementById('record-button'),
    uploadRecording: document.getElementById('upload-recording'),
    discardRecording: document.getElementById('discard-recording'),
    submitText: document.getElementById('submit-text'),
    clearText: document.getElementById('clear-text'),
    uploadModal: document.getElementById('upload-modal'),
    hoursValue: document.getElementById('hours-value'),
    creditValue: document.getElementById('credit-value')
  };

  // API Functions
  async function uploadFile(file, metadata) {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('title', metadata.title);
    formData.append('category_id', metadata.category_id);
    formData.append('user_id', metadata.user_id);
    formData.append('media_type', metadata.media_type);
    
    if (metadata.description) {
      formData.append('description', metadata.description);
    }

    const token = localStorage.getItem('authToken');
    const response = await fetch(`${BASE_URL}/records/upload`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`
      },
      body: formData
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Upload failed');
    }

    return await response.json();
  }

  async function submitTextContent(content, metadata) {
    const token = localStorage.getItem('authToken');
    const response = await fetch(`${BASE_URL}/records/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        title: metadata.title,
        description: content,
        category_id: metadata.category_id,
        user_id: metadata.user_id,
        media_type: 'text'
      })
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Submission failed');
    }

    return await response.json();
  }

  async function getUserStats() {
    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(`${BASE_URL}/users/stats`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      return response.ok ? await response.json() : { total_recordings: 0, total_duration: 0, credit_score: 0 };
    } catch (error) {
      console.error('Failed to load user stats:', error);
      return { total_recordings: 0, total_duration: 0, credit_score: 0 };
    }
  }

  // Initialize dashboard
  function initDashboard() {
    loadUserStats();
    setupEventListeners();
  }

  // Load user statistics
  async function loadUserStats() {
    try {
      const stats = await getUserStats();
      
      if (dashboardElements.hoursValue) {
        const hours = Math.floor(stats.total_duration / 3600);
        dashboardElements.hoursValue.textContent = hours.toString();
      }
      
      if (dashboardElements.creditValue) {
        dashboardElements.creditValue.textContent = stats.credit_score.toString();
      }
    } catch (error) {
      console.error('Failed to load user stats:', error);
    }
  }

  // Show upload progress modal
  function showUploadModal(status, message) {
    if (dashboardElements.uploadModal) {
      dashboardElements.uploadModal.classList.remove('hidden');
      
      const statusEl = document.getElementById('upload-status');
      const messageEl = document.getElementById('upload-message');
      
      if (statusEl) statusEl.textContent = status;
      if (messageEl) messageEl.textContent = message;
    }
  }

  // Hide upload progress modal
  function hideUploadModal() {
    if (dashboardElements.uploadModal) {
      dashboardElements.uploadModal.classList.add('hidden');
    }
  }

  // Update upload progress
  function updateUploadProgress(percentage) {
    const progressCircle = document.getElementById('progress-circle');
    const progressPercentage = document.getElementById('progress-percentage');
    
    if (progressCircle && progressPercentage) {
      const circumference = 2 * Math.PI * 25;
      const offset = circumference - (percentage / 100) * circumference;
      
      progressCircle.style.strokeDasharray = circumference.toString();
      progressCircle.style.strokeDashoffset = offset.toString();
      
      progressPercentage.textContent = `${percentage}%`;
    }
  }

  // Toggle side navigation
  function toggleSideNav() {
    if (dashboardElements.sideNav && dashboardElements.sideNavOverlay) {
      const isOpen = dashboardElements.sideNav.classList.contains('active');
      isOpen ? closeSideNav() : openSideNav();
    }
  }

  function openSideNav() {
    dashboardElements.sideNav?.classList.add('active');
    dashboardElements.sideNavOverlay?.classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  function closeSideNav() {
    dashboardElements.sideNav?.classList.remove('active');
    dashboardElements.sideNavOverlay?.classList.remove('active');
    document.body.style.overflow = '';
  }

  // Topic selection
  function handleTopicSelection(topicElement) {
    const topicName = topicElement.getAttribute('data-topic');
    const topicText = topicElement.querySelector('.topic-name')?.textContent;
    
    currentTopic = topicText || '';
    
    topicElement.style.transform = 'scale(0.95)';
    setTimeout(() => {
      topicElement.style.transform = '';
      
      if (dashboardElements.selectedTopicTitle) {
        dashboardElements.selectedTopicTitle.textContent = topicText || '';
      }
      
      if (dashboardElements.dashboardView && dashboardElements.topicDetailView) {
        dashboardElements.dashboardView.classList.remove('active');
        dashboardElements.topicDetailView.classList.add('active');
      }
      
      hideAllMediaInterfaces();
    }, 150);
  }

  // Back to dashboard
  function handleBackToDashboard() {
    if (dashboardElements.dashboardView && dashboardElements.topicDetailView) {
      dashboardElements.topicDetailView.classList.remove('active');
      dashboardElements.dashboardView.classList.add('active');
    }
    
    clearAllSelections();
  }

  // Media option selection
  function handleMediaOptionSelection(mediaOptionElement) {
    const mediaType = mediaOptionElement.getAttribute('data-media-type');
    currentMediaType = mediaType;
    
    mediaOptionElement.style.transform = 'scale(0.95)';
    setTimeout(() => {
      mediaOptionElement.style.transform = '';
      
      hideAllMediaInterfaces();
      
      switch(mediaType) {
        case 'audio':
          setupFileUpload(['audio/*'], 'Select audio files (MP3, WAV, etc.)');
          break;
        case 'image':
          setupFileUpload(['image/*'], 'Select image files (JPG, PNG, etc.)');
          break;
        case 'video':
          setupFileUpload(['video/*'], 'Select video files (MP4, AVI, etc.)');
          break;
        case 'text':
          dashboardElements.textInterface?.classList.remove('hidden');
          break;
      }
    }, 150);
  }

  // Setup file upload
  function setupFileUpload(acceptedTypes, subtitle) {
    if (dashboardElements.fileUploadInterface) {
      dashboardElements.fileUploadInterface.classList.remove('hidden');
      
      if (dashboardElements.fileInput) {
        dashboardElements.fileInput.accept = acceptedTypes.join(',');
      }
      
      const uploadSubtitle = document.getElementById('upload-subtitle');
      if (uploadSubtitle) {
        uploadSubtitle.textContent = subtitle;
      }
    }
  }

  // Hide all media interfaces
  function hideAllMediaInterfaces() {
    dashboardElements.fileUploadInterface?.classList.add('hidden');
    dashboardElements.recordingInterface?.classList.add('hidden');
    dashboardElements.textInterface?.classList.add('hidden');
  }

  // Clear all selections
  function clearAllSelections() {
    selectedFiles = [];
    displayFilePreview([]);
    dashboardElements.uploadSelectedFiles?.classList.add('hidden');
    dashboardElements.clearSelection?.classList.add('hidden');
    
    if (dashboardElements.fileInput) {
      dashboardElements.fileInput.value = '';
    }
    
    const textInput = document.getElementById('text-input');
    if (textInput) {
      textInput.value = '';
    }
    
    hideAllMediaInterfaces();
  }

  // Handle file selection
  function handleFileSelection(files) {
    selectedFiles = Array.from(files);
    displayFilePreview(selectedFiles);
    
    if (selectedFiles.length > 0) {
      dashboardElements.uploadSelectedFiles?.classList.remove('hidden');
      dashboardElements.clearSelection?.classList.remove('hidden');
    }
  }

  // Display file preview
  function displayFilePreview(files) {
    if (!dashboardElements.filePreview) return;
    
    dashboardElements.filePreview.innerHTML = '';
    
    files.forEach((file, index) => {
      const fileItem = document.createElement('div');
      fileItem.className = 'file-item';
      fileItem.innerHTML = `
        <div class="file-info">
          <div class="file-icon">${getFileIcon(file.type)}</div>
          <div class="file-details">
            <span class="file-name">${file.name}</span>
            <span class="file-size">${(file.size / 1024 / 1024).toFixed(2)} MB</span>
          </div>
        </div>
        <button class="remove-file" onclick="removeFile(${index})">×</button>
      `;
      dashboardElements.filePreview.appendChild(fileItem);
    });
  }

  // Get file icon based on type
  function getFileIcon(type) {
    if (type.startsWith('image/')) return '🖼️';
    if (type.startsWith('audio/')) return '🎵';
    if (type.startsWith('video/')) return '🎥';
    if (type.startsWith('text/')) return '📝';
    return '📄';
  }

  // Remove file from selection
  window.removeFile = function(index) {
    selectedFiles.splice(index, 1);
    displayFilePreview(selectedFiles);
    
    if (selectedFiles.length === 0) {
      dashboardElements.uploadSelectedFiles?.classList.add('hidden');
      dashboardElements.clearSelection?.classList.add('hidden');
    }
  };

  // Upload selected files
  async function uploadSelectedFiles() {
    if (selectedFiles.length === 0) return;

    const userId = localStorage.getItem('userId');
    if (!userId) {
      showErrorMessage('User not authenticated');
      return;
    }

    showUploadModal('Uploading Files...', `Uploading ${selectedFiles.length} file(s)`);

    try {
      for (let i = 0; i < selectedFiles.length; i++) {
        const file = selectedFiles[i];
        const progress = ((i + 1) / selectedFiles.length) * 100;
        updateUploadProgress(progress);

        const metadata = {
          title: `${currentTopic} - ${file.name}`,
          category_id: getTopicCategoryId(currentTopic),
          user_id: userId,
          media_type: currentMediaType,
          description: `${currentMediaType} upload for ${currentTopic}`
        };

        await uploadFile(file, metadata);
      }

      hideUploadModal();
      showSuccessMessage(`Successfully uploaded ${selectedFiles.length} file(s)!`);
      clearAllSelections();
      loadUserStats();

    } catch (error) {
      hideUploadModal();
      showErrorMessage('Upload failed: ' + error.message);
    }
  }

  // Submit text content
  async function submitTextContent() {
    const textInput = document.getElementById('text-input');
    if (!textInput) return;

    const content = textInput.value.trim();
    if (!content) {
      showErrorMessage('Please enter some text');
      return;
    }

    const userId = localStorage.getItem('userId');
    if (!userId) {
      showErrorMessage('User not authenticated');
      return;
    }

    showUploadModal('Submitting Text...', 'Please wait while we save your text');

    try {
      const metadata = {
        title: `${currentTopic} - Text Contribution`,
        category_id: getTopicCategoryId(currentTopic),
        user_id: userId
      };

      updateUploadProgress(50);
      await submitTextContent(content, metadata);
      updateUploadProgress(100);

      setTimeout(() => {
        hideUploadModal();
        showSuccessMessage('Text submitted successfully!');
        textInput.value = '';
        loadUserStats();
      }, 1000);

    } catch (error) {
      hideUploadModal();
      showErrorMessage('Submission failed: ' + error.message);
    }
  }

  // Get category ID for topic (this would be dynamic in a real app)
  function getTopicCategoryId(topic) {
    // This is a placeholder - in a real app, you'd map topics to actual category IDs
    const topicMap = {
      'Fables': '1',
      'Events': '2',
      'Music': '3',
      'Places': '4',
      'Food': '5',
      'People': '6',
      'Literature': '7',
      'Architecture': '8',
      'Skills': '9',
      'Images': '10',
      'Culture': '11',
      'Flora & fauna': '12',
      'Education': '13',
      'Vegetation': '14'
    };
    return topicMap[topic] || '1';
  }

  // Show success message
  function showSuccessMessage(message) {
    // You can integrate with your existing notification system
    console.log('Success:', message);
    // For now, using browser alert - you can replace with your notification system
    alert(message);
  }

  // Show error message
  function showErrorMessage(message) {
    console.error('Error:', message);
    alert(message);
  }

  // Navigation handling
  function handleNavigation(navType) {
    if (navType === 'logout') {
      handleLogout();
      return;
    }
    
    dashboardElements.navItems.forEach(item => 
      item.classList.remove('active'));
    
    document.querySelector(`[data-nav="${navType}"]`)?.classList.add('active');
    closeSideNav();
  }

  // Handle logout
  async function handleLogout() {
    try {
      localStorage.removeItem('authToken');
      localStorage.removeItem('userId');
      localStorage.removeItem('userData');
      window.location.reload();
    } catch (error) {
      console.error('Logout failed:', error);
    }
  }

  // Event listeners
  function setupEventListeners() {
    // Navigation
    dashboardElements.menuToggle?.addEventListener('click', toggleSideNav);
    dashboardElements.closeNav?.addEventListener('click', closeSideNav);
    dashboardElements.sideNavOverlay?.addEventListener('click', closeSideNav);
    dashboardElements.backToDashboard?.addEventListener('click', handleBackToDashboard);
    
    // Topic selection
    dashboardElements.topicCards.forEach(card => {
      card.addEventListener('click', () => handleTopicSelection(card));
    });
    
    // Media option selection
    dashboardElements.mediaOptionCards.forEach(card => {
      card.addEventListener('click', () => handleMediaOptionSelection(card));
    });
    
    // Navigation items
    dashboardElements.navItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.preventDefault();
        const navType = item.getAttribute('data-nav');
        if (navType) handleNavigation(navType);
      });
    });
    
    // File upload events
    dashboardElements.uploadZone?.addEventListener('click', () => {
      dashboardElements.fileInput?.click();
    });
    
    dashboardElements.uploadZone?.addEventListener('dragover', (e) => {
      e.preventDefault();
      dashboardElements.uploadZone?.classList.add('drag-over');
    });
    
    dashboardElements.uploadZone?.addEventListener('dragleave', () => {
      dashboardElements.uploadZone?.classList.remove('drag-over');
    });
    
    dashboardElements.uploadZone?.addEventListener('drop', (e) => {
      e.preventDefault();
      dashboardElements.uploadZone?.classList.remove('drag-over');
      handleFileSelection(e.dataTransfer.files);
    });
    
    dashboardElements.fileInput?.addEventListener('change', (e) => {
      handleFileSelection(e.target.files);
    });
    
    dashboardElements.uploadSelectedFiles?.addEventListener('click', uploadSelectedFiles);
    dashboardElements.clearSelection?.addEventListener('click', clearAllSelections);
    
    // Text submission
    dashboardElements.submitText?.addEventListener('click', submitTextContent);
    dashboardElements.clearText?.addEventListener('click', () => {
      const textInput = document.getElementById('text-input');
      if (textInput) textInput.value = '';
    });
  }

  // Initialize dashboard
  initDashboard();
});
</script>
</Layout>