  ---
  import Layout from '../layouts/layout.astro';
  import '../styles/global-styles.css';
  import Dashboard from '../pages/dashboard.astro'
  ---
  <Layout title="Swecha - Telugu Language Recognition">
    <div class="app-container">
      <!-- Splash Screen -->
      <div id="splash-screen" class="screen active">
        <div class="splash-content">
          <div class="profile-icon">
            <svg width="80" height="80" viewBox="0 0 80 80" fill="none">
              <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
              <circle cx="40" cy="30" r="12" fill="#fff"/>
              <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
            </svg>
          </div>
          <h1 class="app-title">తెలుగు భాష గుర్తింపు</h1>
          <div class="app-subtitle">A product by <strong>Swecha</strong></div>
        </div>
      </div>

      <!-- Sign In Screen -->
      <div id="signin-screen" class="screen">
        <div class="auth-container">
          <div class="auth-header">
            <div class="profile-icon small">
              <svg width="60" height="60" viewBox="0 0 80 80" fill="none">
                <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
                <circle cx="40" cy="30" r="12" fill="#fff"/>
                <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
              </svg>
            </div>
            <h2>Sign in to your account</h2>
            <p class="auth-subtitle">Enter your phone number to receive OTP</p>
          </div>
          
          <form id="signin-form" class="auth-form">
            <div class="form-group">
              <input type="tel" id="signin-phone" class="form-control" placeholder="Enter your phone number here" required>
            </div>
            <button type="submit" class="btn btn--primary btn--full-width ripple">SEND OTP</button>
          </form>

          <div class="auth-footer">
            <p>Don't have an account? <a href="#" id="go-to-create">Create account</a></p>
            <div class="app-subtitle">A product by <strong>Swecha</strong></div>
          </div>
        </div>
      </div>

      <!-- Create Account Screen -->
      <div id="create-account-screen" class="screen">
        <div class="auth-container">
          <div class="auth-header">
            <div class="profile-icon small">
              <svg width="60" height="60" viewBox="0 0 80 80" fill="none">
                <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
                <circle cx="40" cy="30" r="12" fill="#fff"/>
                <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
              </svg>
            </div>
            <h2>Create your account</h2>
            <p class="auth-subtitle">Please provide your details</p>
          </div>
          
          <form id="create-account-form" class="auth-form">
            <div class="form-grid">
              <div class="form-group">
                <input type="text" id="full-name" class="form-control" placeholder="Full Name" required>
              </div>
              <div class="form-group">
                <input type="email" id="email" class="form-control" placeholder="Email Address" required>
              </div>
              <div class="form-group">
                <select id="gender" class="form-control" required>
                  <option value="">Select Gender</option>
                  <option value="male">Male</option>
                  <option value="female">Female</option>
                  <option value="other">Other</option>
                </select>
              </div>
              <div class="form-group">
                <input type="date" id="dob" class="form-control" placeholder="Date of Birth" required>
              </div>
              <div class="form-group">
                <input type="tel" id="create-phone" class="form-control" placeholder="Phone Number" required>
              </div>
            </div>
            <button type="submit" id="create-account-submit" class="btn btn--primary btn--full-width ripple">CREATE ACCOUNT</button>
          </form>

          <div class="auth-footer">
            <p>Already a member? <a href="#" id="go-to-signin">Sign in here</a></p>
            <div class="app-subtitle">A product by <strong>Swecha</strong></div>
          </div>
        </div>
      </div>

      <!-- OTP Verification Screen -->
      <div id="otp-screen" class="screen">
        <div class="auth-container">
          <div class="auth-header">
            <div class="profile-icon small">
              <svg width="60" height="60" viewBox="0 0 80 80" fill="none">
                <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
                <circle cx="40" cy="30" r="12" fill="#fff"/>
                <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
              </svg>
            </div>
            <h2 id="otp-heading">Verify your phone</h2>
            <p class="otp-subtitle">Enter OTP sent to your phone</p>
            <p id="otp-phone-display" class="auth-phone-display"></p>
          </div>
          
          <form id="otp-form" class="auth-form">
            <div class="form-group">
              <input type="text" id="otp-code" class="form-control" placeholder="Enter the OTP sent to your phone" required maxlength="6">
            </div>
            <button type="submit" class="btn btn--primary btn--full-width ripple">VERIFY OTP</button>
          </form>

          <div class="auth-footer">
            <p>Didn't receive OTP? <a href="#" id="resend-otp">Resend</a></p>
            <p><a href="#" id="back-to-phone">Use a different phone number</a></p>
            <div class="app-subtitle">A product by <strong>Swecha</strong></div>
          </div>
        </div>
      </div>

      <!-- Success Screen -->
      <div id="success-screen" class="screen">
        <div class="splash-content">
          <div class="profile-icon">
            <svg width="80" height="80" viewBox="0 0 80 80" fill="none">
              <circle cx="40" cy="40" r="38" fill="#4CAF50" stroke="#fff" stroke-width="4"/>
              <path d="M25 40l10 10 20-20" stroke="#fff" stroke-width="4" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
          <h1 class="success-title">Welcome to Swecha!</h1>
          <p class="success-message">Your account has been verified successfully.</p>
          <button id="continue-to-dashboard" class="btn btn--primary btn--lg ripple">Continue to Dashboard</button>
        </div>
      </div>

      <Dashboard />

      <!-- New Account Required Notification -->
      <div id="account-required-overlay" class="lock-overlay">
        <div class="lock-message">
          <h3 class="lock-title">Account Required</h3>
          <p class="lock-text">You need to create an account before signing in. Would you like to create a new account now?</p>
          <button id="go-to-create-from-overlay" class="lock-button ripple">Create Account</button>
        </div>
      </div>

      <!-- Notification Component -->
      <div id="notification" class="notification">
        <div class="notification-message"></div>
        <button class="notification-close">&times;</button>
      </div>
    </div>
  </Layout>

  <script>
  // Import API services
  import { AuthAPI } from '../services/api-service';
  import userService from '../services/user-service';

  // Client-side JavaScript - will run in the browser
  document.addEventListener('DOMContentLoaded', () => {
    // TypeScript type definitions
    type AppState = {
      currentPhone: string | null;
      currentScreen: string;
      authFlow: 'signin' | 'signup' | null;
      sessionToken: string | null;
      isAuthenticated: boolean;
      hasAccount: boolean;
      userData: {
        name: string;
        email: string;
        gender: string;
        dob: string;
      };
    };

    type APIResponse = {
      success: boolean;
      message?: string;
      sessionToken?: string;
      token?: string;
      userExists?: boolean;
      user?: {
        id: string;
        phone: string;
        name?: string;
        email?: string;
        gender?: string;
        dob?: string;
      };
    };

    type Screens = {
      [key: string]: HTMLElement | null;
    };

    type Forms = {
      [key: string]: HTMLFormElement | null;
    };

    type NavLinks = {
      [key: string]: HTMLElement | null;
    };

    // Global state
    let appState: AppState = {
      currentPhone: null,
      currentScreen: 'splash',
      authFlow: null,
      sessionToken: null,
      isAuthenticated: false,
      hasAccount: false,
      userData: {
        name: '',
        email: '',
        gender: '',
        dob: ''
      }
    };

    // DOM Elements
    const screens: Screens = {
      splash: document.getElementById('splash-screen'),
      signin: document.getElementById('signin-screen'),
      createAccount: document.getElementById('create-account-screen'),
      otp: document.getElementById('otp-screen'),
      success: document.getElementById('success-screen'),
      dashboard: document.getElementById('dashboard-screen'),
      accountRequired: document.getElementById('account-required-overlay')
    };

    const forms: Forms = {
      signin: document.getElementById('signin-form') as HTMLFormElement,
      createAccount: document.getElementById('create-account-form') as HTMLFormElement,
      otp: document.getElementById('otp-form') as HTMLFormElement
    };

    const navLinks: NavLinks = {
      goToCreate: document.getElementById('go-to-create'),
      goToSignin: document.getElementById('go-to-signin'),
      resendOtp: document.getElementById('resend-otp'),
      backToPhone: document.getElementById('back-to-phone'),
      continueToDashboard: document.getElementById('continue-to-dashboard'),
      goToCreateFromOverlay: document.getElementById('go-to-create-from-overlay')
    };

    const createAccountSubmitBtn = document.getElementById('create-account-submit') as HTMLButtonElement;
    const notification = document.getElementById('notification');
    const notificationMessage = document.querySelector('.notification-message');
    const notificationClose = document.querySelector('.notification-close');

    // Show specified screen and hide others
    function showScreen(screenId: string): void {
      console.log('Showing screen:', screenId);
      
      // Hide all screens
      Object.values(screens).forEach(screen => {
        if (screen && screen !== screens.accountRequired) {
          screen.classList.remove('active');
        }
      });
      
      // Show the selected screen
      if (screens[screenId]) {
        screens[screenId]?.classList.add('active');
        appState.currentScreen = screenId;
        
        // Update authentication state if showing dashboard
        if (screenId === 'dashboard') {
          appState.isAuthenticated = true;
        }
      }
    }

    // Initialize app
    function initApp(): void {
      console.log('Initializing app...');
      
      // Check if user is already authenticated
      const userState = userService.getState();
      if (userState.isAuthenticated) {
        console.log('User already authenticated, showing dashboard');
        showScreen('dashboard');
        return;
      }
      
      // Show splash screen and auto-transition to signin
      showScreen('splash');
      
      setTimeout(() => {
        console.log('Transitioning to signin screen...');
        showScreen('signin');
      }, 2500);

      // Setup event listeners
      setupEventListeners();
      enhanceInputFields();
      setupNotifications();
      setupUserServiceListener();
    }

    // Setup user service state listener
    function setupUserServiceListener(): void {
      userService.subscribe((userState) => {
        appState.isAuthenticated = userState.isAuthenticated;
        appState.hasAccount = userState.hasAccount;
        appState.currentPhone = userState.currentPhone;
        
        if (userState.error) {
          showNotification(userState.error, 'error');
        }
      });
    }

    // Show notification
    function showNotification(message: string, type: 'error' | 'success' | 'warning' = 'error'): void {
      if (notification && notificationMessage) {
        notification.className = 'notification';
        notification.classList.add(`notification-${type}`);
        notification.classList.add('active');
        notificationMessage.textContent = message;
        
        setTimeout(() => {
          hideNotification();
        }, 5000);
      }
    }

    // Hide notification
    function hideNotification(): void {
      if (notification) {
        notification.classList.remove('active');
      }
    }

    // Setup notification system
    function setupNotifications(): void {
      if (notificationClose) {
        notificationClose.addEventListener('click', hideNotification);
      }
    }

    // Form validation
    function validateForm(formType: string, data: Record<string, any>): Record<string, string> {
      const errors: Record<string, string> = {};
      
      if (data.phone !== undefined) {
        const phoneRegex = /^\d{10}$/;
        if (!data.phone || !data.phone.trim()) {
          errors.phone = 'Phone number is required';
        } else if (!phoneRegex.test(data.phone)) {
          errors.phone = 'Please enter a valid 10-digit phone number';
        }
      }
      
      if (formType === 'createAccount') {
        if (!data.name || !data.name.trim()) {
          errors.name = 'Full name is required';
        }
        
        if (!data.email || !data.email.trim()) {
          errors.email = 'Email is required';
        } else if (!/\S+@\S+\.\S+/.test(data.email)) {
          errors.email = 'Please enter a valid email address';
        }
        
        if (!data.gender) {
          errors.gender = 'Please select your gender';
        }
        
        if (!data.dob) {
          errors.dob = 'Date of birth is required';
        }
      }
      
      if (data.otp !== undefined) {
        if (!data.otp || !data.otp.trim()) {
          errors.otp = 'OTP is required';
        } else if (data.otp.length !== 6 || !/^\d+$/.test(data.otp)) {
          errors.otp = 'OTP must be 6 digits';
        }
      }
      
      return errors;
    }

    // Display form errors
    function showFormErrors(formType: string, errors: Record<string, string>): void {
      const form = forms[formType];
      if (!form) return;
      
      const errorMessages = form.querySelectorAll('.error-message');
      errorMessages.forEach(msg => msg.remove());
      
      form.querySelectorAll('.form-control').forEach(input => {
        input.classList.remove('error');
      });
      
      Object.entries(errors).forEach(([field, message]) => {
        let inputField;
        if (formType === 'otp' && field === 'otp') {
          inputField = document.getElementById('otp-code');
        } else if (formType === 'createAccount') {
          if (field === 'name') {
            inputField = document.getElementById('full-name');
          } else if (field === 'email') {
            inputField = document.getElementById('email');
          } else if (field === 'gender') {
            inputField = document.getElementById('gender');
          } else if (field === 'dob') {
            inputField = document.getElementById('dob');
          } else {
            inputField = document.getElementById(`${formType}-${field}`);
          }
        } else {
          inputField = document.getElementById(`${formType}-${field}`);
        }
        
        if (inputField) {
          inputField.classList.add('error');
          
          const errorEl = document.createElement('span');
          errorEl.className = 'error-message';
          errorEl.textContent = message;
          
          const parent = inputField.parentNode;
          if (parent) {
            parent.appendChild(errorEl);
          }
        }
      });
    }

    // Clear form errors
    function clearFormErrors(formType: string): void {
      const form = forms[formType];
      if (!form) return;
      
      const errorMessages = form.querySelectorAll('.error-message');
      errorMessages.forEach(msg => msg.remove());
      
      form.querySelectorAll('.form-control, .btn').forEach(input => {
        input.classList.remove('error');
      });
    }

    // Show account required overlay
    function showAccountRequiredOverlay(): void {
      if (screens.accountRequired) {
        screens.accountRequired.classList.add('active');
        
        // Add shake animation to message
        const lockMessage = screens.accountRequired.querySelector('.lock-message');
        if (lockMessage) {
          lockMessage.classList.add('shake');
          setTimeout(() => {
            lockMessage.classList.remove('shake');
          }, 600);
        }
      }
    }

    // Hide account required overlay
    function hideAccountRequiredOverlay(): void {
      if (screens.accountRequired) {
        screens.accountRequired.classList.remove('active');
      }
    }

    // Form submission handling - UPDATED TO USE REAL API SERVICE
    async function handleFormSubmit(formType: string, event: Event): Promise<void> {
      event.preventDefault();
      
      const form = forms[formType];
      if (!form) return;
      
      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      if (!submitButton) return;
      
      const originalText = submitButton.textContent || 'Submit';
      
      clearFormErrors(formType);
      
      // Show loading state
      form.classList.add('loading');
      submitButton.textContent = 'Loading...';
      
      // Get form data
      const formData: Record<string, any> = {};
      if (formType === 'signin') {
        const phoneInput = document.getElementById('signin-phone') as HTMLInputElement;
        formData.phone = phoneInput?.value || '';
        formData.action = 'signin';
        appState.authFlow = 'signin';
      } else if (formType === 'createAccount') {
        const phoneInput = document.getElementById('create-phone') as HTMLInputElement;
        const nameInput = document.getElementById('full-name') as HTMLInputElement;
        const emailInput = document.getElementById('email') as HTMLInputElement;
        const genderInput = document.getElementById('gender') as HTMLSelectElement;
        const dobInput = document.getElementById('dob') as HTMLInputElement;
        
        formData.phone = phoneInput?.value || '';
        formData.name = nameInput?.value || '';
        formData.email = emailInput?.value || '';
        formData.gender = genderInput?.value || '';
        formData.dob = dobInput?.value || '';
        formData.action = 'signup';
        appState.authFlow = 'signup';
        
        // Update user data in state
        appState.userData = {
          name: formData.name,
          email: formData.email,
          gender: formData.gender,
          dob: formData.dob
        };
      } else if (formType === 'otp') {
        const otpInput = document.getElementById('otp-code') as HTMLInputElement;
        formData.otp = otpInput?.value || '';
        formData.phone = appState.currentPhone || '';
      }
      
      // Validate form
      const errors = validateForm(formType, formData);
      
      if (Object.keys(errors).length > 0) {
        form.classList.remove('loading');
        submitButton.textContent = originalText;
        showFormErrors(formType, errors);
        return;
      }
      
      try {
        if (formType === 'signin') {
          // Check if user exists first
          const userExists = await userService.checkUserExists(formData.phone);
          
          if (!userExists) {
            // User doesn't have an account, show overlay
            form.classList.remove('loading');
            submitButton.textContent = originalText;
            showAccountRequiredOverlay();
            return;
          }
          
          // Send OTP for existing user
          await userService.sendOTP(formData.phone, 'signin');
          
          // Update OTP screen with phone number
          const phoneDisplay = document.getElementById('otp-phone-display');
          if (phoneDisplay) {
            phoneDisplay.textContent = `+91 ${formData.phone}`;
          }
          
          // Update OTP heading based on flow
          const otpHeading = document.getElementById('otp-heading');
          if (otpHeading) {
            otpHeading.textContent = 'Sign in to your account';
          }
          
          showScreen('otp');
          showNotification('OTP sent successfully!', 'success');
          
        } else if (formType === 'createAccount') {
          // Check if user already exists
          const userExists = await userService.checkUserExists(formData.phone);
          
          if (userExists) {
            // User already exists, redirect to signin
            form.classList.remove('loading');
            submitButton.textContent = originalText;
            showNotification('Phone number already registered. Please sign in instead.', 'warning');
            setTimeout(() => {
              showScreen('signin');
            }, 2000);
            return;
          }
          
          // Create new user account
          await userService.createUser({
            phone: formData.phone,
            name: formData.name,
            email: formData.email,
            gender: formData.gender,
            dob: formData.dob
          });
          
          // Send OTP for new account
          await userService.sendOTP(formData.phone, 'signup');
          
          // Update OTP screen with phone number
          const phoneDisplay = document.getElementById('otp-phone-display');
          if (phoneDisplay) {
            phoneDisplay.textContent = `+91 ${formData.phone}`;
          }
          
          // Update OTP heading
          const otpHeading = document.getElementById('otp-heading');
          if (otpHeading) {
            otpHeading.textContent = 'Create your account';
          }
          
          showScreen('otp');
          showNotification('OTP sent successfully!', 'success');
          
        } else if (formType === 'otp') {
          // Verify OTP
          await userService.verifyOTP(formData.phone, formData.otp);
          
          // Show success screen
          showScreen('success');
          showNotification('Phone verified successfully!', 'success');
        }
      } catch (error) {
        console.error('API Error:', error);
        
        let errorMessage = 'An error occurred. Please try again.';
        
        if (error && typeof error === 'object' && 'message' in error) {
          errorMessage = error.message as string;
        } else if (formType === 'signin' || formType === 'createAccount') {
          errorMessage = 'Failed to send OTP. Please check your phone number.';
        } else if (formType === 'otp') {
          errorMessage = 'Invalid OTP. Please try again.';
        }
        
        const fieldName = formType === 'otp' ? 'otp' : 'phone';
        const errors: Record<string, string> = { [fieldName]: errorMessage };
        showFormErrors(formType, errors);
        
        showNotification(errorMessage, 'error');
      } finally {
        // Reset loading state
        form.classList.remove('loading');
        submitButton.textContent = originalText;
      }
    }

    // Setup event listeners
    function setupEventListeners(): void {
      console.log('Setting up event listeners...');
      
      // Form submissions
      if (forms.signin) {
        forms.signin.addEventListener('submit', (e: Event) => handleFormSubmit('signin', e));
      }
      
      if (forms.createAccount) {
        forms.createAccount.addEventListener('submit', (e: Event) => handleFormSubmit('createAccount', e));
      }
      
      if (forms.otp) {
        forms.otp.addEventListener('submit', (e: Event) => handleFormSubmit('otp', e));
      }
      
      // Navigation
      if (navLinks.goToCreate) {
        navLinks.goToCreate.addEventListener('click', (e: MouseEvent) => {
          e.preventDefault();
          showScreen('createAccount');
        });
      }
      
      if (navLinks.goToSignin) {
        navLinks.goToSignin.addEventListener('click', (e: MouseEvent) => {
          e.preventDefault();
          showScreen('signin');
        });
      }
      
      if (navLinks.goToCreateFromOverlay) {
        navLinks.goToCreateFromOverlay.addEventListener('click', (e: MouseEvent) => {
          e.preventDefault();
          hideAccountRequiredOverlay();
          showScreen('createAccount');
        });
      }
      
      // REAL RESEND OTP FUNCTIONALITY
      if (navLinks.resendOtp) {
        navLinks.resendOtp.addEventListener('click', async function(e: MouseEvent) {
          e.preventDefault();
          
          const resendBtn = e.target as HTMLElement;
          const originalText = resendBtn.textContent || 'Resend';
          resendBtn.textContent = 'Sending...';
          resendBtn.style.pointerEvents = 'none';
          
          try {
            // Call resend OTP through user service
            await userService.sendOTP(appState.currentPhone || '', appState.authFlow || 'signin');
            
            resendBtn.textContent = 'Sent!';
            showNotification('OTP resent successfully!', 'success');
            
            setTimeout(() => {
              resendBtn.textContent = originalText;
              resendBtn.style.pointerEvents = 'auto';
            }, 3000);
          } catch (error) {
            console.error('Failed to resend OTP:', error);
            resendBtn.textContent = 'Failed!';
            showNotification('Failed to resend OTP. Please try again.', 'error');
            
            setTimeout(() => {
              resendBtn.textContent = originalText;
              resendBtn.style.pointerEvents = 'auto';
            }, 3000);
          }
        });
      }
      
      if (navLinks.backToPhone) {
        navLinks.backToPhone.addEventListener('click', (e: MouseEvent) => {
          e.preventDefault();
          showScreen(appState.authFlow === 'signin' ? 'signin' : 'createAccount');
        });
      }
      
      // Navigate to dashboard screen
      if (navLinks.continueToDashboard) {
        navLinks.continueToDashboard.addEventListener('click', (e: MouseEvent) => {
          e.preventDefault();
          showScreen('dashboard');
        });
      }
      
      // Splash screen click to continue
      if (screens.splash) {
        screens.splash.addEventListener('click', () => {
          showScreen('signin');
        });
      }
      
      // Account required overlay close on click outside
      if (screens.accountRequired) {
        screens.accountRequired.addEventListener('click', (e: MouseEvent) => {
          if (e.target === screens.accountRequired) {
            hideAccountRequiredOverlay();
          }
        });
      }
    }

    // Input field enhancement
    function enhanceInputFields(): void {
      console.log('Enhancing input fields...');
      
      const inputs = document.querySelectorAll('.form-control');
      
      inputs.forEach(input => {
        // Phone number formatting
        if ((input as HTMLInputElement).type === 'tel') {
          input.addEventListener('input', (e: Event) => {
            const target = e.target as HTMLInputElement;
            let value = target.value.replace(/[^\d]/g, '');
            
            if (value.length > 10) {
              value = value.slice(0, 10);
            }
            
            target.value = value;
          });
          
          input.addEventListener('keypress', function(e: Event) {
            const keyboardEvent = e as KeyboardEvent;
            if (!/\d/.test(keyboardEvent.key) && !['Backspace', 'Delete', 'Tab', 'Enter'].includes(keyboardEvent.key)) {
              e.preventDefault();
            }
          });
        }
        
        // OTP field enhancements
        if (input.id === 'otp-code') {
          input.addEventListener('input', (e: Event) => {
            const target = e.target as HTMLInputElement;
            let value = target.value.replace(/[^\d]/g, '');
            
            if (value.length > 6) {
              value = value.slice(0, 6);
            }
            
            target.value = value;
          });
          
          input.addEventListener('keypress', function(e: Event) {
            const keyboardEvent = e as KeyboardEvent;
            if (!/\d/.test(keyboardEvent.key) && !['Backspace', 'Delete', 'Tab', 'Enter'].includes(keyboardEvent.key)) {
              e.preventDefault();
            }
          });
        }
        
        // Clear error state on input
        input.addEventListener('input', () => {
          input.classList.remove('error');
          const errorMsg = input.parentNode?.querySelector('.error-message');
          if (errorMsg) {
            errorMsg.remove();
          }
        });
      });
      
      // Add ripple effect to buttons
      const rippleButtons = document.querySelectorAll('.ripple');
      rippleButtons.forEach(button => {
        button.addEventListener('click', function(e: Event) {
          const mouseEvent = e as MouseEvent;
          const target = mouseEvent.target as HTMLElement;
          const x = mouseEvent.clientX - target.getBoundingClientRect().left;
          const y = mouseEvent.clientY - target.getBoundingClientRect().top;
          
          const ripple = document.createElement('span');
          ripple.classList.add('ripple-effect');
          ripple.style.left = `${x}px`;
          ripple.style.top = `${y}px`;
          
          button.appendChild(ripple);
          
          setTimeout(() => {
            ripple.remove();
          }, 600);
        });
      });
    }

    // Start the app
    console.log('Starting app initialization...');
    initApp();
  });
  </script>
  </Layout>
