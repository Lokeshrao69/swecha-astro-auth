---
import Layout from '../layouts/layout.astro';
import '../styles/global-styles.css';
---
<Layout title="Swecha - Telugu Language Recognition">
  <div class="app-container">
    <!-- Splash Screen -->
    <div id="splash-screen" class="screen active">
      <div class="splash-content">
        <div class="profile-icon">
          <svg width="80" height="80" viewBox="0 0 80 80" fill="none">
            <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
            <circle cx="40" cy="30" r="12" fill="#fff"/>
            <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
          </svg>
        </div>
        <h1 class="app-title">‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞≠‡∞æ‡∞∑ ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å</h1>
        <div class="app-subtitle">A product by <strong>Swecha</strong></div>
      </div>
    </div>

    <!-- Sign In Screen -->
    <div id="signin-screen" class="screen">
      <div class="auth-container">
        <div class="auth-header">
          <div class="profile-icon small">
            <svg width="60" height="60" viewBox="0 0 80 80" fill="none">
              <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
              <circle cx="40" cy="30" r="12" fill="#fff"/>
              <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
            </svg>
          </div>
          <h2>Sign in to your account</h2>
          <p class="auth-subtitle">Enter your phone number to receive OTP</p>
        </div>
        
        <form id="signin-form" class="auth-form">
          <div class="form-group">
            <input type="tel" id="signin-phone" class="form-control" placeholder="Enter your phone number here" required>
          </div>
          <button type="submit" class="btn btn--primary btn--full-width ripple">SEND OTP</button>
        </form>

        <div class="auth-footer">
          <p>Don't have an account? <a href="#" id="go-to-create">Create account</a></p>
          <div class="app-subtitle">A product by <strong>Swecha</strong></div>
        </div>
      </div>
    </div>

    <!-- Create Account Screen -->
    <div id="create-account-screen" class="screen">
      <div class="auth-container">
        <div class="auth-header">
          <div class="profile-icon small">
            <svg width="60" height="60" viewBox="0 0 80 80" fill="none">
              <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
              <circle cx="40" cy="30" r="12" fill="#fff"/>
              <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
            </svg>
          </div>
          <h2>Create your account</h2>
          <p class="auth-subtitle">Please provide your details</p>
        </div>
        
        <form id="create-account-form" class="auth-form">
          <div class="form-grid">
            <div class="form-group">
              <input type="text" id="full-name" class="form-control" placeholder="Full Name" required>
            </div>
            <div class="form-group">
              <input type="email" id="email" class="form-control" placeholder="Email Address" required>
            </div>
            <div class="form-group">
              <select id="gender" class="form-control" required>
                <option value="">Select Gender</option>
                <option value="male">Male</option>
                <option value="female">Female</option>
                <option value="other">Other</option>
              </select>
            </div>
            <div class="form-group">
              <input type="date" id="dob" class="form-control" placeholder="Date of Birth" required>
            </div>
            <div class="form-group tooltip">
              <button type="button" id="location-btn" class="btn btn--secondary btn--full-width location-btn">
                <span id="location-btn-text">Allow Location Access</span>
                <span id="location-icon">üìç</span>
              </button>
              <span id="location-status" class="location-status"></span>
              <span class="tooltip-text">Location access is required to create an account</span>
            </div>
            <div class="form-group">
              <input type="tel" id="create-phone" class="form-control" placeholder="Phone Number" required>
            </div>
          </div>
          <button type="submit" id="create-account-submit" class="btn btn--primary btn--full-width ripple" disabled>CREATE ACCOUNT</button>
        </form>

        <div class="auth-footer">
          <p>Already a member? <a href="#" id="go-to-signin">Sign in here</a></p>
          <div class="app-subtitle">A product by <strong>Swecha</strong></div>
        </div>
      </div>
    </div>

    <!-- OTP Verification Screen -->
    <div id="otp-screen" class="screen">
      <div class="auth-container">
        <div class="auth-header">
          <div class="profile-icon small">
            <svg width="60" height="60" viewBox="0 0 80 80" fill="none">
              <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
              <circle cx="40" cy="30" r="12" fill="#fff"/>
              <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
            </svg>
          </div>
          <h2 id="otp-heading">Verify your phone</h2>
          <p class="otp-subtitle">Enter OTP sent to your phone</p>
          <p id="otp-phone-display" class="auth-phone-display"></p>
        </div>
        
        <form id="otp-form" class="auth-form">
          <div class="form-group">
            <input type="text" id="otp-code" class="form-control" placeholder="Enter the OTP sent to your phone" required maxlength="6">
          </div>
          <button type="submit" class="btn btn--primary btn--full-width ripple">VERIFY OTP</button>
        </form>

        <div class="auth-footer">
          <p>Didn't receive OTP? <a href="#" id="resend-otp">Resend</a></p>
          <p><a href="#" id="back-to-phone">Use a different phone number</a></p>
          <div class="app-subtitle">A product by <strong>Swecha</strong></div>
        </div>
      </div>
    </div>

    <!-- Success Screen -->
    <div id="success-screen" class="screen">
      <div class="splash-content">
        <div class="profile-icon">
          <svg width="80" height="80" viewBox="0 0 80 80" fill="none">
            <circle cx="40" cy="40" r="38" fill="#4CAF50" stroke="#fff" stroke-width="4"/>
            <path d="M25 40l10 10 20-20" stroke="#fff" stroke-width="4" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>
        <h1 class="success-title">Welcome to Swecha!</h1>
        <p class="success-message">Your account has been verified successfully.</p>
        <button id="continue-to-dashboard" class="btn btn--primary btn--lg ripple">Continue to Dashboard</button>
      </div>
    </div>

    <!-- Dashboard Screen -->
    <div id="dashboard-screen" class="screen">
      <div class="dashboard-container">
        <!-- Dashboard Header -->
        <div class="dashboard-header">
          <div class="header-left">
            <button id="menu-toggle" class="menu-toggle">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="3" y1="6" x2="21" y2="6"></line>
                <line x1="3" y1="12" x2="21" y2="12"></line>
                <line x1="3" y1="18" x2="21" y2="18"></line>
              </svg>
            </button>
            <h1 class="dashboard-title">‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞≠‡∞æ‡∞∑ ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å</h1>
          </div>
          <div class="user-profile">
            <div class="profile-icon small">
              <svg width="40" height="40" viewBox="0 0 80 80" fill="none">
                <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
                <circle cx="40" cy="30" r="12" fill="#fff"/>
                <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
              </svg>
            </div>
          </div>
        </div>

        <!-- User Stats -->
        <div class="user-stats">
          <div class="stat-item">
            <span class="stat-label">Sessions</span>
            <span class="stat-value">0</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Accuracy</span>
            <span class="stat-value">0%</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Hours</span>
            <span class="stat-value">0h</span>
          </div>
        </div>

        <!-- Main Dashboard Content -->
        <div class="dashboard-main">
          <!-- Dashboard View -->
          <div id="dashboard-view" class="dashboard-view active">
            <div class="prompt-section">
              <h2 class="prompt-title">Choose a topic to practice</h2>
              <p class="prompt-subtitle">Select from various categories to improve your Telugu language skills</p>
            </div>

            <!-- Topics Grid -->
            <div class="topics-grid">
              <a href="#" class="topic-card" data-topic="animals">
                <div class="topic-icon">ü¶Å</div>
                <div class="topic-name">Animals</div>
              </a>
              <a href="#" class="topic-card" data-topic="colors">
                <div class="topic-icon">üé®</div>
                <div class="topic-name">Colors</div>
              </a>
              <a href="#" class="topic-card" data-topic="numbers">
                <div class="topic-icon">üî¢</div>
                <div class="topic-name">Numbers</div>
              </a>
              <a href="#" class="topic-card" data-topic="family">
                <div class="topic-icon">üë®‚Äçüë©‚Äçüëß‚Äçüë¶</div>
                <div class="topic-name">Family</div>
              </a>
              <a href="#" class="topic-card" data-topic="food">
                <div class="topic-icon">üçõ</div>
                <div class="topic-name">Food</div>
              </a>
              <a href="#" class="topic-card" data-topic="body">
                <div class="topic-icon">üë§</div>
                <div class="topic-name">Body Parts</div>
              </a>
              <a href="#" class="topic-card" data-topic="nature">
                <div class="topic-icon">üå≥</div>
                <div class="topic-name">Nature</div>
              </a>
            </div>
          </div>

          <!-- Topic Detail View -->
          <div id="topic-detail-view" class="topic-detail-view">
            <div class="topic-header">
              <button id="back-to-dashboard" class="back-button">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="m12 19-7-7 7-7"></path>
                  <path d="M19 12H5"></path>
                </svg>
                Back
              </button>
              <h2 id="selected-topic-title" class="selected-topic-title">Topic Name</h2>
            </div>

            <p class="topic-instruction">Choose how you'd like to practice this topic</p>

            <!-- Media Options Grid -->
            <div class="media-options-grid">
              <div class="media-option-card" data-media="voice">
                <div class="media-icon">üé§</div>
                <div class="media-name">Voice</div>
                <div class="media-description">Record your pronunciation</div>
              </div>
              <div class="media-option-card" data-media="text">
                <div class="media-icon">‚úèÔ∏è</div>
                <div class="media-name">Text</div>
                <div class="media-description">Type in Telugu script</div>
              </div>
              <div class="media-option-card" data-media="audio">
                <div class="media-icon">üîä</div>
                <div class="media-name">Audio</div>
                <div class="media-description">Upload audio file</div>
              </div>
              <div class="media-option-card" data-media="video">
                <div class="media-icon">üìπ</div>
                <div class="media-name">Video</div>
                <div class="media-description">Record or upload video</div>
              </div>
            </div>

            <!-- Media Interfaces -->
            <div id="voice-interface" class="media-interface hidden">
              <div class="recording-interface">
                <button id="mic-button" class="mic-button">
                  <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="m12 1 0 22"></path>
                    <path d="m17 5h0a5 5 0 0 1 0 10"></path>
                    <path d="m21 3h0a9 9 0 0 1 0 18"></path>
                    <path d="m7 5h0a5 5 0 0 0 0 10"></path>
                    <path d="m3 3h0a9 9 0 0 0 0 18"></path>
                  </svg>
                </button>
                <p class="mic-instruction">Click to start recording</p>
              </div>
            </div>

            <div id="text-interface" class="media-interface hidden">
              <textarea id="text-input" class="text-input" placeholder="Type in Telugu..."></textarea>
              <button id="submit-text" class="submit-button">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <line x1="22" y1="2" x2="11" y2="13"></line>
                  <polygon points="22,2 15,22 11,13 2,9"></polygon>
                </svg>
                Submit
              </button>
              <p class="text-instruction">Type your response in Telugu</p>
            </div>

            <div id="audio-interface" class="media-interface hidden">
              <button id="upload-audio" class="upload-button">
                <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                  <polyline points="17,8 12,3 7,8"></polyline>
                  <line x1="12" y1="3" x2="12" y2="15"></line>
                </svg>
                Upload Audio
              </button>
              <input type="file" id="audio-file" class="hidden-input" accept="audio/*">
              <p class="upload-instruction">Upload an audio file</p>
            </div>

            <div id="video-interface" class="media-interface hidden">
              <button id="video-button" class="video-button">
                <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polygon points="23,7 16,12 23,17"></polygon>
                  <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                </svg>
                Record Video
              </button>
              <p class="video-instruction">Record or upload a video</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Side Navigation -->
      <div id="side-nav-overlay" class="side-nav-overlay"></div>
      <div id="side-nav" class="side-nav">
        <div class="side-nav-header">
          <button id="close-nav" class="close-nav-btn">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
        <div class="side-nav-content">
          <a href="#" class="nav-item active" data-view="dashboard">
            <span class="nav-icon">üè†</span>
            Dashboard
          </a>
          <a href="#" class="nav-item" data-view="profile">
            <span class="nav-icon">üë§</span>
            Profile
          </a>
          <a href="#" class="nav-item" data-view="progress">
            <span class="nav-icon">üìä</span>
            Progress
          </a>
          <a href="#" class="nav-item" data-view="settings">
            <span class="nav-icon">‚öôÔ∏è</span>
            Settings
          </a>
        </div>
      </div>
    </div>

    <!-- New Account Required Notification -->
    <div id="account-required-overlay" class="lock-overlay">
      <div class="lock-message">
        <h3 class="lock-title">Account Required</h3>
        <p class="lock-text">You need to create an account before signing in. Would you like to create a new account now?</p>
        <button id="go-to-create-from-overlay" class="lock-button ripple">Create Account</button>
      </div>
    </div>

    <!-- Notification Component -->
    <div id="notification" class="notification">
      <div class="notification-message"></div>
      <button class="notification-close">&times;</button>
    </div>
  </div>
</Layout>

<script>
// Client-side JavaScript - will run in the browser
document.addEventListener('DOMContentLoaded', () => {
  // TypeScript type definitions
  type AppState = {
    currentPhone: string | null;
    currentScreen: string;
    authFlow: 'signin' | 'signup' | null;
    sessionToken: string | null;
    isAuthenticated: boolean;
    hasAccount: boolean;
    locationGranted: boolean;
    userData: {
      name: string;
      email: string;
      gender: string;
      dob: string;
      location: { lat: number; lng: number } | null;
    };
  };

  type APIResponse = {
    success: boolean;
    message?: string;
    sessionToken?: string;
    token?: string;
    userExists?: boolean;
    user?: {
      id: string;
      phone: string;
      name?: string;
      email?: string;
      gender?: string;
      dob?: string;
      location?: { lat: number; lng: number } | null;
    };
  };

  type Screens = {
    [key: string]: HTMLElement | null;
  };

  type Forms = {
    [key: string]: HTMLFormElement | null;
  };

  type NavLinks = {
    [key: string]: HTMLElement | null;
  };

  // Global state
  let appState: AppState = {
    currentPhone: null,
    currentScreen: 'splash',
    authFlow: null,
    sessionToken: null,
    isAuthenticated: false,
    hasAccount: false,
    locationGranted: false,
    userData: {
      name: '',
      email: '',
      gender: '',
      dob: '',
      location: null
    }
  };

  // DOM Elements - Include dashboard screen
  const screens: Screens = {
    splash: document.getElementById('splash-screen'),
    signin: document.getElementById('signin-screen'),
    createAccount: document.getElementById('create-account-screen'),
    otp: document.getElementById('otp-screen'),
    success: document.getElementById('success-screen'),
    dashboard: document.getElementById('dashboard-screen'),
    accountRequired: document.getElementById('account-required-overlay')
  };

  const forms: Forms = {
    signin: document.getElementById('signin-form') as HTMLFormElement,
    createAccount: document.getElementById('create-account-form') as HTMLFormElement,
    otp: document.getElementById('otp-form') as HTMLFormElement
  };

  const navLinks: NavLinks = {
    goToCreate: document.getElementById('go-to-create'),
    goToSignin: document.getElementById('go-to-signin'),
    resendOtp: document.getElementById('resend-otp'),
    backToPhone: document.getElementById('back-to-phone'),
    continueToDashboard: document.getElementById('continue-to-dashboard'),
    locationBtn: document.getElementById('location-btn'),
    goToCreateFromOverlay: document.getElementById('go-to-create-from-overlay')
  };

  const createAccountSubmitBtn = document.getElementById('create-account-submit') as HTMLButtonElement;
  const locationBtnText = document.getElementById('location-btn-text');
  const locationIcon = document.getElementById('location-icon');
  const notification = document.getElementById('notification');
  const notificationMessage = document.querySelector('.notification-message');
  const notificationClose = document.querySelector('.notification-close');

  // Show specified screen and hide others
  function showScreen(screenId: string): void {
    console.log('Showing screen:', screenId);
    
    // Hide all screens
    Object.values(screens).forEach(screen => {
      if (screen && screen !== screens.accountRequired) {
        screen.classList.remove('active');
      }
    });
    
    // Show the selected screen
    if (screens[screenId]) {
      screens[screenId]?.classList.add('active');
      appState.currentScreen = screenId;
      
      // Update authentication state if showing dashboard
      if (screenId === 'dashboard') {
        appState.isAuthenticated = true;
      }
    }
  }

  // Initialize app
  function initApp(): void {
    console.log('Initializing app...');
    
    // Show splash screen and auto-transition to signin
    showScreen('splash');
    
    setTimeout(() => {
      console.log('Transitioning to signin screen...');
      showScreen('signin');
    }, 2500);

    // Setup event listeners
    setupEventListeners();
    enhanceInputFields();
    setupNotifications();
  }

  // Show notification
  function showNotification(message: string, type: 'error' | 'success' | 'warning' = 'error'): void {
    if (notification && notificationMessage) {
      notification.className = 'notification';
      notification.classList.add(`notification-${type}`);
      notification.classList.add('active');
      notificationMessage.textContent = message;
      
      setTimeout(() => {
        hideNotification();
      }, 5000);
    }
  }

  // Hide notification
  function hideNotification(): void {
    if (notification) {
      notification.classList.remove('active');
    }
  }

  // Setup notification system
  function setupNotifications(): void {
    if (notificationClose) {
      notificationClose.addEventListener('click', hideNotification);
    }
  }

  // Form validation
  function validateForm(formType: string, data: Record<string, any>): Record<string, string> {
    const errors: Record<string, string> = {};
    
    if (data.phone !== undefined) {
      const phoneRegex = /^\d{10}$/;
      if (!data.phone || !data.phone.trim()) {
        errors.phone = 'Phone number is required';
      } else if (!phoneRegex.test(data.phone)) {
        errors.phone = 'Please enter a valid 10-digit phone number';
      }
    }
    
    if (formType === 'createAccount') {
      if (!data.name || !data.name.trim()) {
        errors.name = 'Full name is required';
      }
      
      if (!data.email || !data.email.trim()) {
        errors.email = 'Email is required';
      } else if (!/\S+@\S+\.\S+/.test(data.email)) {
        errors.email = 'Please enter a valid email address';
      }
      
      if (!data.gender) {
        errors.gender = 'Please select your gender';
      }
      
      if (!data.dob) {
        errors.dob = 'Date of birth is required';
      }
      
      if (!appState.locationGranted || !data.location) {
        errors.location = 'Location access is required';
      }
    }
    
    if (data.otp !== undefined) {
      if (!data.otp || !data.otp.trim()) {
        errors.otp = 'OTP is required';
      } else if (data.otp.length !== 6 || !/^\d+$/.test(data.otp)) {
        errors.otp = 'OTP must be 6 digits';
      }
    }
    
    return errors;
  }

  // Display form errors
  function showFormErrors(formType: string, errors: Record<string, string>): void {
    const form = forms[formType];
    if (!form) return;
    
    const errorMessages = form.querySelectorAll('.error-message');
    errorMessages.forEach(msg => msg.remove());
    
    form.querySelectorAll('.form-control').forEach(input => {
      input.classList.remove('error');
    });
    
    Object.entries(errors).forEach(([field, message]) => {
      let inputField;
      if (formType === 'otp' && field === 'otp') {
        inputField = document.getElementById('otp-code');
      } else if (formType === 'createAccount') {
        if (field === 'name') {
          inputField = document.getElementById('full-name');
        } else if (field === 'email') {
          inputField = document.getElementById('email');
        } else if (field === 'gender') {
          inputField = document.getElementById('gender');
        } else if (field === 'dob') {
          inputField = document.getElementById('dob');
        } else if (field === 'location') {
          inputField = document.getElementById('location-btn');
        } else {
          inputField = document.getElementById(`${formType}-${field}`);
        }
      } else {
        inputField = document.getElementById(`${formType}-${field}`);
      }
      
      if (inputField) {
        inputField.classList.add('error');
        
        const errorEl = document.createElement('span');
        errorEl.className = 'error-message';
        errorEl.textContent = message;
        
        const parent = inputField.parentNode;
        if (parent) {
          parent.appendChild(errorEl);
        }
      }
    });
  }

  // Clear form errors
  function clearFormErrors(formType: string): void {
    const form = forms[formType];
    if (!form) return;
    
    const errorMessages = form.querySelectorAll('.error-message');
    errorMessages.forEach(msg => msg.remove());
    
    form.querySelectorAll('.form-control, .btn').forEach(input => {
      input.classList.remove('error');
    });
  }

  // Check if user has account
  async function checkUserAccount(phone: string): Promise<boolean> {
    // This would be an API call to check if the user exists
    console.log(`Checking if user with phone ${phone} exists`);
    
    // Simulate API call
    return new Promise((resolve) => {
      setTimeout(() => {
        // Demo check: phone numbers ending with even digits are "existing accounts"
        const lastDigit = parseInt(phone.charAt(phone.length - 1));
        const hasAccount = lastDigit % 2 === 0;
        appState.hasAccount = hasAccount;
        resolve(hasAccount);
      }, 1000);
    });
  }

  // Show account required overlay
  function showAccountRequiredOverlay(): void {
    if (screens.accountRequired) {
      screens.accountRequired.classList.add('active');
      
      // Add shake animation to message
      const lockMessage = screens.accountRequired.querySelector('.lock-message');
      if (lockMessage) {
        lockMessage.classList.add('shake');
        setTimeout(() => {
          lockMessage.classList.remove('shake');
        }, 600);
      }
    }
  }

  // Hide account required overlay
  function hideAccountRequiredOverlay(): void {
    if (screens.accountRequired) {
      screens.accountRequired.classList.remove('active');
    }
  }

  // Form submission handling
  async function handleFormSubmit(formType: string, event: Event): Promise<void> {
    event.preventDefault();
    
    const form = forms[formType];
    if (!form) return;
    
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    if (!submitButton) return;
    
    const originalText = submitButton.textContent || 'Submit';
    
    clearFormErrors(formType);
    
    // Show loading state
    form.classList.add('loading');
    submitButton.textContent = 'Loading...';
    
    // Get form data
    const formData: Record<string, any> = {};
    if (formType === 'signin') {
      const phoneInput = document.getElementById('signin-phone') as HTMLInputElement;
      formData.phone = phoneInput?.value || '';
      formData.action = 'signin';
      appState.authFlow = 'signin';
    } else if (formType === 'createAccount') {
      const phoneInput = document.getElementById('create-phone') as HTMLInputElement;
      const nameInput = document.getElementById('full-name') as HTMLInputElement;
      const emailInput = document.getElementById('email') as HTMLInputElement;
      const genderInput = document.getElementById('gender') as HTMLSelectElement;
      const dobInput = document.getElementById('dob') as HTMLInputElement;
      
      formData.phone = phoneInput?.value || '';
      formData.name = nameInput?.value || '';
      formData.email = emailInput?.value || '';
      formData.gender = genderInput?.value || '';
      formData.dob = dobInput?.value || '';
      formData.location = appState.userData.location;
      formData.action = 'signup';
      appState.authFlow = 'signup';
      
      // Update user data in state
      appState.userData = {
        name: formData.name,
        email: formData.email,
        gender: formData.gender,
        dob: formData.dob,
        location: formData.location
      };
    } else if (formType === 'otp') {
      const otpInput = document.getElementById('otp-code') as HTMLInputElement;
      formData.otp = otpInput?.value || '';
      formData.phone = appState.currentPhone || '';
      formData.sessionToken = appState.sessionToken || '';
    }
    
    // Validate form
    const errors = validateForm(formType, formData);
    
    if (Object.keys(errors).length > 0) {
      form.classList.remove('loading');
      submitButton.textContent = originalText;
      showFormErrors(formType, errors);
      return;
    }
    
    try {
      // API integration points
      if (formType === 'signin') {
        // Check if user exists
        const userExists = await checkUserAccount(formData.phone);
        
        if (!userExists) {
          // User doesn't have an account, show overlay
          form.classList.remove('loading');
          submitButton.textContent = originalText;
          showAccountRequiredOverlay();
          return;
        }
        
        // Call send OTP API
        const response = await sendOTP(formData.phone, formData.action);
        
        if (response.success) {
          // Store phone and session token for OTP verification
          appState.currentPhone = formData.phone;
          appState.sessionToken = response.sessionToken || '';
          
          // Update OTP screen with phone number
          const phoneDisplay = document.getElementById('otp-phone-display');
          if (phoneDisplay) {
            phoneDisplay.textContent = `+${formData.phone}`;
          }
          
          // Update OTP heading based on flow
          const otpHeading = document.getElementById('otp-heading');
          if (otpHeading) {
            otpHeading.textContent = appState.authFlow === 'signin' 
              ? 'Sign in to your account' 
              : 'Create your account';
          }
          
          showScreen('otp');
        } else {
          // Show error
          const errors = { phone: response.message || 'Failed to send OTP' };
          showFormErrors(formType, errors);
        }
      } else if (formType === 'createAccount') {
        // Call send OTP API
        const response = await sendOTP(formData.phone, formData.action, appState.userData);
        
        if (response.success) {
          // Store phone and session token for OTP verification
          appState.currentPhone = formData.phone;
          appState.sessionToken = response.sessionToken || '';
          
          // Update OTP screen with phone number
          const phoneDisplay = document.getElementById('otp-phone-display');
          if (phoneDisplay) {
            phoneDisplay.textContent = `+${formData.phone}`;
          }
          
          // Update OTP heading based on flow
          const otpHeading = document.getElementById('otp-heading');
          if (otpHeading) {
            otpHeading.textContent = 'Create your account';
          }
          
          // Save data temporarily
          localStorage.setItem('tempUserData', JSON.stringify(appState.userData));
          
          showScreen('otp');
        } else {
          // Show error
          const errors = { phone: response.message || 'Failed to send OTP' };
          showFormErrors(formType, errors);
        }
      } else if (formType === 'otp') {
        // Call verify OTP API
        const response = await verifyOTP(
          formData.phone || '', 
          formData.otp || '', 
          formData.sessionToken || ''
        );
        
        if (response.success) {
          // Store auth token (JWT)
          if (response.token) {
            localStorage.setItem('authToken', response.token);
            appState.isAuthenticated = true;
            
            // If this was a signup flow, store the user data permanently
            if (appState.authFlow === 'signup') {
              const userData = JSON.parse(localStorage.getItem('tempUserData') || '{}');
              localStorage.setItem('userData', JSON.stringify(userData));
              localStorage.removeItem('tempUserData');
              
              // Set hasAccount to true since they now have an account
              appState.hasAccount = true;
            }
            
            // For signin flow, go to success then dashboard
            showScreen('success');
          } else {
            // Redirect to signin if from create account flow
            if (appState.authFlow === 'signup') {
              showNotification('Account created successfully! Please sign in.', 'success');
              showScreen('signin');
            } else {
              showScreen('success');
            }
          }
        } else {
          // Show error
          const errors = { otp: response.message || 'Invalid OTP' };
          showFormErrors(formType, errors);
        }
      }
    } catch (error) {
      console.error('API Error:', error);
      
      // Show generic error
      const fieldName = formType === 'otp' ? 'otp' : 'phone';
      const errors: Record<string, string> = { [fieldName]: 'An error occurred. Please try again.' };
      showFormErrors(formType, errors);
    } finally {
      // Reset loading state
      form.classList.remove('loading');
      submitButton.textContent = originalText;
    }
  }

  // API integration functions
  async function sendOTP(phone: string, action: string, userData?: AppState['userData']): Promise<APIResponse> {
    console.log(`Sending OTP to ${phone} for ${action}`);
    
    // Store user data temporarily if this is a signup
    if (action === 'signup' && userData) {
      localStorage.setItem('tempUserData', JSON.stringify(userData));
    }
    
    // Simulate API call
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({
          success: true,
          message: 'OTP sent successfully',
          sessionToken: 'temp_session_token_' + Math.random().toString(36).substring(2)
        });
      }, 1500);
    });
  }

  async function verifyOTP(phone: string, otp: string, sessionToken: string): Promise<APIResponse> {
    console.log(`Verifying OTP ${otp} for phone ${phone} with session ${sessionToken}`);
    
    // Simulate API call
    return new Promise((resolve) => {
      setTimeout(() => {
        // Check if OTP is '123456' for demo purposes
        if (otp === '123456') {
          const tempUserData = JSON.parse(localStorage.getItem('tempUserData') || '{}');
          
          // If this was a signup flow, we'll include the user data
          const userData = appState.authFlow === 'signup' ? tempUserData : {};
          
          resolve({
            success: true,
            token: 'jwt_token_' + Math.random().toString(36).substring(2),
            user: {
              id: 'user_' + Math.random().toString(36).substring(2),
              phone: phone,
              ...userData
            }
          });
        } else {
          resolve({ success: false, message: 'Invalid OTP' });
        }
      }, 1500);
    });
  }

  // FIXED: Handle location access with improved error handling and proper geolocation options
  async function handleLocationAccess(): Promise<void> {
    const locationStatus = document.getElementById('location-status');
    const locationBtn = navLinks.locationBtn as HTMLButtonElement;
    
    // Disable the button while requesting to prevent multiple clicks
    if (locationBtn) {
      locationBtn.disabled = true;
    }
    
    if (locationStatus) {
      locationStatus.textContent = 'Requesting location...';
      locationStatus.className = 'location-status';
    }
    
    // Geolocation options with proper timeout and accuracy settings
    const geoOptions = {
      enableHighAccuracy: true,  // Use GPS if available
      timeout: 15000,           // 15 second timeout
      maximumAge: 300000        // Accept cached positions up to 5 minutes old
    };
    
    if (navigator.geolocation) {
      try {
        // Convert geolocation to Promise-based approach for better error handling
        const position = await new Promise<GeolocationPosition>((resolve, reject) => {
          navigator.geolocation.getCurrentPosition(
            resolve,
            reject,
            geoOptions
          );
        });
        
        // Successfully got location
        console.log('Location access granted:', position);
        
        // Store coordinates (with validation that they're proper numbers)
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        
        if (typeof lat === 'number' && typeof lng === 'number' && !isNaN(lat) && !isNaN(lng)) {
          appState.userData.location = {
            lat: lat,
            lng: lng
          };
          
          appState.locationGranted = true;
          
          if (locationStatus) {
            locationStatus.textContent = 'Location access granted';
            locationStatus.classList.add('success');
          }
          
          // Update button style to indicate success
          if (locationBtn) {
            locationBtn.classList.add('location-success');
            
            if (locationBtnText) {
              locationBtnText.textContent = 'Location Access Granted';
            }
            
            if (locationIcon) {
              locationIcon.textContent = '‚úì';
            }
          }
          
          // Enable create account button if location is granted
          if (createAccountSubmitBtn) {
            createAccountSubmitBtn.disabled = false;
          }
        } else {
          throw new Error('Invalid coordinates received');
        }
      } catch (error) {
        console.error('Error getting location:', error);
        
        // Check for specific error codes to provide better feedback
        if (error instanceof GeolocationPositionError) {
          switch(error.code) {
            case error.PERMISSION_DENIED:
              // Handle permission denied
              if (locationStatus) {
                locationStatus.textContent = 'Location permission denied by browser';
                locationStatus.classList.add('error');
              }
              showNotification('Please enable location access in your browser settings and try again.', 'error');
              break;
              
            case error.POSITION_UNAVAILABLE:
              // Handle position unavailable
              if (locationStatus) {
                locationStatus.textContent = 'Location unavailable';
                locationStatus.classList.add('error');
              }
              showNotification('Unable to determine your location. Please try again.', 'warning');
              break;
              
            case error.TIMEOUT:
              // Handle timeout
              if (locationStatus) {
                locationStatus.textContent = 'Location request timed out';
                locationStatus.classList.add('error');
              }
              showNotification('Location request timed out. Please try again.', 'warning');
              break;
              
            default:
              // Handle other errors
              if (locationStatus) {
                locationStatus.textContent = 'Error accessing location';
                locationStatus.classList.add('error');
              }
              showNotification('Error accessing location. Please try again.', 'error');
          }
        } else {
          // Generic error handling for non-GeolocationPositionError errors
          if (locationStatus) {
            locationStatus.textContent = 'Error accessing location';
            locationStatus.classList.add('error');
          }
          showNotification('Error accessing your location. Please try again.', 'error');
        }
        
        // Reset state
        appState.locationGranted = false;
        appState.userData.location = null;
        
        // Keep the create account button disabled
        if (createAccountSubmitBtn) {
          createAccountSubmitBtn.disabled = true;
        }
        
        // Reset button appearance for retry
        if (locationBtn) {
          locationBtn.classList.remove('location-success');
          
          if (locationBtnText) {
            locationBtnText.textContent = 'Retry Location Access';
          }
          
          if (locationIcon) {
            locationIcon.textContent = 'üìç';
          }
        }
      } finally {
        // Re-enable the button regardless of outcome
        if (locationBtn) {
          locationBtn.disabled = false;
        }
      }
    } else {
      // Browser doesn't support geolocation
      appState.locationGranted = false;
      
      if (locationStatus) {
        locationStatus.textContent = 'Geolocation not supported';
        locationStatus.classList.add('error');
      }
      
      // Keep the create account button disabled
      if (createAccountSubmitBtn) {
        createAccountSubmitBtn.disabled = true;
      }
      
      // Re-enable the location button
      if (locationBtn) {
        locationBtn.disabled = false;
      }
      
      showNotification('Your browser does not support geolocation which is required for account creation.', 'error');
    }
  }

  // Setup event listeners
  function setupEventListeners(): void {
    console.log('Setting up event listeners...');
    
    // Form submissions
    if (forms.signin) {
      forms.signin.addEventListener('submit', (e: Event) => handleFormSubmit('signin', e));
    }
    
    if (forms.createAccount) {
      forms.createAccount.addEventListener('submit', (e: Event) => handleFormSubmit('createAccount', e));
    }
    
    if (forms.otp) {
      forms.otp.addEventListener('submit', (e: Event) => handleFormSubmit('otp', e));
    }
    
    // Navigation
    if (navLinks.goToCreate) {
      navLinks.goToCreate.addEventListener('click', (e: MouseEvent) => {
        e.preventDefault();
        showScreen('createAccount');
      });
    }
    
    if (navLinks.goToSignin) {
      navLinks.goToSignin.addEventListener('click', (e: MouseEvent) => {
        e.preventDefault();
        showScreen('signin');
      });
    }
    
    if (navLinks.goToCreateFromOverlay) {
      navLinks.goToCreateFromOverlay.addEventListener('click', (e: MouseEvent) => {
        e.preventDefault();
        hideAccountRequiredOverlay();
        showScreen('createAccount');
      });
    }
    
    if (navLinks.resendOtp) {
      navLinks.resendOtp.addEventListener('click', function(e: MouseEvent) {
        e.preventDefault();
        
        const resendBtn = e.target as HTMLElement;
        const originalText = resendBtn.textContent || 'Resend';
        resendBtn.textContent = 'Sending...';
        if (resendBtn.style) {
          resendBtn.style.pointerEvents = 'none';
        }
        
        // Use an IIFE for async operations
        (async function() {
          try {
            await sendOTP(appState.currentPhone || '', appState.authFlow || 'signin');
          
            resendBtn.textContent = 'Sent!';
            setTimeout(() => {
              resendBtn.textContent = originalText;
              if (resendBtn.style) {
                resendBtn.style.pointerEvents = 'auto';
              }
            }, 2000);
          } catch (error) {
            console.error('Failed to resend OTP:', error);
            resendBtn.textContent = 'Failed!';
            setTimeout(() => {
              resendBtn.textContent = originalText;
              if (resendBtn.style) {
                resendBtn.style.pointerEvents = 'auto';
              }
            }, 2000);
          }
        })();
      });
    }
    
    if (navLinks.backToPhone) {
      navLinks.backToPhone.addEventListener('click', (e: MouseEvent) => {
        e.preventDefault();
        showScreen(appState.authFlow === 'signin' ? 'signin' : 'createAccount');
      });
    }
    
    // Location button handler
    if (navLinks.locationBtn) {
      navLinks.locationBtn.addEventListener('click', () => {
        handleLocationAccess();
      });
    }
    
    // Navigate to dashboard screen
    if (navLinks.continueToDashboard) {
      navLinks.continueToDashboard.addEventListener('click', (e: MouseEvent) => {
        e.preventDefault();
        showScreen('dashboard');
      });
    }
    
    // Splash screen click to continue
    if (screens.splash) {
      screens.splash.addEventListener('click', () => {
        showScreen('signin');
      });
    }
    
    // Account required overlay close on click outside
    if (screens.accountRequired) {
      screens.accountRequired.addEventListener('click', (e: MouseEvent) => {
        if (e.target === screens.accountRequired) {
          hideAccountRequiredOverlay();
        }
      });
    }
  }

  // Input field enhancement
  function enhanceInputFields(): void {
    console.log('Enhancing input fields...');
    
    const inputs = document.querySelectorAll('.form-control');
    
    inputs.forEach(input => {
      // Phone number formatting
      if ((input as HTMLInputElement).type === 'tel') {
        input.addEventListener('input', (e: Event) => {
          const target = e.target as HTMLInputElement;
          let value = target.value.replace(/[^\d]/g, '');
          
          if (value.length > 10) {
            value = value.slice(0, 10);
          }
          
          target.value = value;
        });
        
        input.addEventListener('keypress', function(e: Event) {
          const keyboardEvent = e as KeyboardEvent;
          if (!/\d/.test(keyboardEvent.key) && !['Backspace', 'Delete', 'Tab', 'Enter'].includes(keyboardEvent.key)) {
            e.preventDefault();
          }
        });
      }
      
      // OTP field enhancements
      if (input.id === 'otp-code') {
        input.addEventListener('input', (e: Event) => {
          const target = e.target as HTMLInputElement;
          let value = target.value.replace(/[^\d]/g, '');
          
          if (value.length > 6) {
            value = value.slice(0, 6);
          }
          
          target.value = value;
        });
        
        input.addEventListener('keypress', function(e: Event) {
          const keyboardEvent = e as KeyboardEvent;
          if (!/\d/.test(keyboardEvent.key) && !['Backspace', 'Delete', 'Tab', 'Enter'].includes(keyboardEvent.key)) {
            e.preventDefault();
          }
        });
      }
      
      // Clear error state on input
      input.addEventListener('input', () => {
        input.classList.remove('error');
        const errorMsg = input.parentNode?.querySelector('.error-message');
        if (errorMsg) {
          errorMsg.remove();
        }
      });
    });
    
    // Add ripple effect to buttons
    const rippleButtons = document.querySelectorAll('.ripple');
    rippleButtons.forEach(button => {
      button.addEventListener('click', function(e: Event) {
        const mouseEvent = e as MouseEvent;
        const target = mouseEvent.target as HTMLElement;
        const x = mouseEvent.clientX - target.getBoundingClientRect().left;
        const y = mouseEvent.clientY - target.getBoundingClientRect().top;
        
        const ripple = document.createElement('span');
        ripple.classList.add('ripple-effect');
        ripple.style.left = `${x}px`;
        ripple.style.top = `${y}px`;
        
        button.appendChild(ripple);
        
        setTimeout(() => {
          ripple.remove();
        }, 600);
      });
    });
  }

  // Start the app
  console.log('Starting app initialization...');
  initApp();
});
</script>
</Layout>