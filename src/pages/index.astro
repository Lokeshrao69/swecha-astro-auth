---
import Layout from '../layouts/layout.astro';
import '../styles/global-styles.css';
---

<Layout title="Swecha - Telugu Language Recognition">
  <div class="app-container">
    <!-- Splash Screen -->
    <div id="splash-screen" class="screen active">
      <div class="splash-content">
        <div class="profile-icon">
          <svg width="80" height="80" viewBox="0 0 80 80" fill="none">
            <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
            <circle cx="40" cy="30" r="12" fill="#fff"/>
            <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
          </svg>
        </div>
        <h1 class="app-title">తెలుగు భాష గుర్తింపు</h1>
        <div class="app-subtitle">A product by <strong>Swecha</strong></div>
      </div>
    </div>

    <!-- Sign In Screen -->
    <div id="signin-screen" class="screen">
      <div class="auth-container">
        <div class="auth-header">
          <div class="profile-icon small">
            <svg width="60" height="60" viewBox="0 0 80 80" fill="none">
              <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
              <circle cx="40" cy="30" r="12" fill="#fff"/>
              <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
            </svg>
          </div>
          <h2>Sign in to your account</h2>
          <p class="auth-subtitle">Choose your preferred login method</p>
        </div>
        
        <!-- Login Method Selector -->
        <div class="login-method-selector">
          <button id="otp-method-btn" class="method-btn active">Login with OTP</button>
          <button id="password-method-btn" class="method-btn">Login with Password</button>
        </div>
        
        <!-- OTP Login Form -->
        <form id="signin-form" class="auth-form">
          <div class="form-group">
            <input type="tel" id="signin-phone" class="form-control" placeholder="Enter your phone number here" required>
          </div>
          <button type="submit" class="btn btn--primary btn--full-width ripple">SEND OTP</button>
        </form>

        <!-- Password Login Form -->
        <form id="password-signin-form" class="auth-form hidden">
          <div class="form-group">
            <input type="tel" id="password-signin-phone" class="form-control" placeholder="Enter your phone number" required>
          </div>
          <div class="form-group">
            <input type="password" id="signin-password" class="form-control" placeholder="Enter your password" required>
          </div>
          <button type="submit" class="btn btn--primary btn--full-width ripple">LOGIN</button>
        </form>

        <div class="auth-footer">
          <p>Don't have an account? <a href="#" id="go-to-create">Create account</a></p>
          <p><a href="#" id="forgot-password">Forgot password?</a></p>
          <div class="app-subtitle">A product by <strong>Swecha</strong></div>
        </div>
      </div>
    </div>

    <!-- Create Account Screen -->
    <div id="create-account-screen" class="screen">
      <div class="auth-container">
        <div class="auth-header">
          <div class="profile-icon small">
            <svg width="60" height="60" viewBox="0 0 80 80" fill="none">
              <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
              <circle cx="40" cy="30" r="12" fill="#fff"/>
              <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
            </svg>
          </div>
          <h2>Create your account</h2>
          <p class="auth-subtitle">Please provide your details</p>
        </div>
        
        <form id="create-account-form" class="auth-form">
          <div class="form-grid">
            <div class="form-group">
              <input type="text" id="full-name" class="form-control" placeholder="Full Name" required>
            </div>
            <div class="form-group">
              <input type="email" id="email" class="form-control" placeholder="Email Address" required>
            </div>
            <div class="form-group">
              <select id="gender" class="form-control" required>
                <option value="">Select Gender</option>
                <option value="male">Male</option>
                <option value="female">Female</option>
                <option value="other">Other</option>
              </select>
            </div>
            <div class="form-group">
              <input type="date" id="dob" class="form-control" placeholder="Date of Birth" required>
            </div>
            <div class="form-group">
              <input type="tel" id="create-phone" class="form-control" placeholder="Phone Number" required>
            </div>
            <div class="form-group">
              <input type="text" id="location" class="form-control" placeholder="Location (City, State)" required>
            </div>
            <div class="form-group">
              <input type="password" id="create-password" class="form-control" placeholder="Create Password" required>
            </div>
            <div class="form-group">
              <input type="password" id="confirm-password" class="form-control" placeholder="Confirm Password" required>
            </div>
          </div>
          <div class="form-group consent-group">
            <label class="consent-checkbox">
              <input type="checkbox" id="consent" required>
              <span class="checkmark"></span>
              I agree to the Terms of Service and Privacy Policy
            </label>
          </div>
          <button type="submit" id="create-account-submit" class="btn btn--primary btn--full-width ripple">CREATE ACCOUNT</button>
        </form>

        <div class="auth-footer">
          <p>Already a member? <a href="#" id="go-to-signin">Sign in here</a></p>
          <div class="app-subtitle">A product by <strong>Swecha</strong></div>
        </div>
      </div>
    </div>

    <!-- OTP Verification Screen -->
    <div id="otp-screen" class="screen">
      <div class="auth-container">
        <div class="auth-header">
          <div class="profile-icon small">
            <svg width="60" height="60" viewBox="0 0 80 80" fill="none">
              <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
              <circle cx="40" cy="30" r="12" fill="#fff"/>
              <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
            </svg>
          </div>
          <h2>Enter verification code</h2>
          <p class="auth-subtitle">We sent a code to <span id="otp-phone-display"></span></p>
        </div>
        
        <form id="otp-form" class="auth-form">
          <div class="otp-input-container">
            <input type="text" class="otp-input" maxlength="1" data-index="0">
            <input type="text" class="otp-input" maxlength="1" data-index="1">
            <input type="text" class="otp-input" maxlength="1" data-index="2">
            <input type="text" class="otp-input" maxlength="1" data-index="3">
            <input type="text" class="otp-input" maxlength="1" data-index="4">
            <input type="text" class="otp-input" maxlength="1" data-index="5">
          </div>
          <button type="submit" class="btn btn--primary btn--full-width ripple">VERIFY</button>
        </form>

        <div class="auth-footer">
          <p>Didn't receive the code? <a href="#" id="resend-otp" class="resend-link">Resend</a></p>
          <div class="app-subtitle">A product by <strong>Swecha</strong></div>
        </div>
      </div>
    </div>

    <!-- Success Screen -->
    <div id="success-screen" class="screen">
      <div class="success-container">
        <div class="success-icon">
          <svg width="80" height="80" viewBox="0 0 80 80" fill="none">
            <circle cx="40" cy="40" r="38" fill="#4CAF50" stroke="#fff" stroke-width="4"/>
            <path d="M25 40l10 10 20-20" stroke="#fff" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>
        <h2>Welcome!</h2>
        <p class="success-message">Your account has been successfully created and verified.</p>
        <button id="go-to-dashboard" class="btn btn--primary btn--full-width ripple">CONTINUE TO DASHBOARD</button>
      </div>
    </div>

    <!-- Dashboard -->
    <div id="dashboard" class="screen">
      <div class="dashboard-container">
        <div class="dashboard-header">
          <div class="user-profile">
            <div class="profile-icon small">
              <svg width="40" height="40" viewBox="0 0 80 80" fill="none">
                <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
                <circle cx="40" cy="30" r="12" fill="#fff"/>
                <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
              </svg>
            </div>
            <div class="user-info">
              <h3 id="user-name">Welcome User</h3>
              <p id="user-phone"></p>
            </div>
          </div>
          <button id="logout-btn" class="btn btn--secondary">Logout</button>
        </div>

        <div class="stats-container">
          <div class="stat-card">
            <div class="stat-number" id="audio-count">0</div>
            <div class="stat-label">Audio Files</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="video-count">0</div>
            <div class="stat-label">Video Files</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="image-count">0</div>
            <div class="stat-label">Images</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="text-count">0</div>
            <div class="stat-label">Text Records</div>
          </div>
        </div>

        <div class="topics-container">
          <h3>Select a Topic</h3>
          <div class="topics-grid">
            <button class="topic-btn" data-topic="health">Health</button>
            <button class="topic-btn" data-topic="education">Education</button>
            <button class="topic-btn" data-topic="technology">Technology</button>
            <button class="topic-btn" data-topic="agriculture">Agriculture</button>
            <button class="topic-btn" data-topic="business">Business</button>
            <button class="topic-btn" data-topic="general">General</button>
          </div>
        </div>

        <div class="media-container">
          <div class="media-tabs">
            <button class="media-tab active" data-type="upload">File Upload</button>
            <button class="media-tab" data-type="text">Text Input</button>
          </div>

          <!-- File Upload Interface -->
          <div id="file-upload-interface" class="media-interface active">
            <div class="upload-container">
              <div class="upload-zone" id="upload-zone">
                <div class="upload-icon">
                  <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M17 8l-5-5-5 5M12 3v12" stroke="currentColor" stroke-width="2"/>
                  </svg>
                </div>
                <p class="upload-text">Click to select files or drag and drop</p>
                <p class="upload-subtitle">Supports: Audio (MP3, WAV), Video (MP4), Images (JPG, PNG), Text (TXT)</p>
                <input type="file" id="file-input" multiple accept=".mp3,.wav,.mp4,.jpg,.jpeg,.png,.txt" class="hidden">
              </div>
              
              <div class="file-preview" id="file-preview"></div>
              
              <button id="upload-selected-files" class="btn btn--primary upload-btn hidden">
                Upload Selected Files
              </button>
            </div>
          </div>

          <!-- Text Input Interface -->
          <div id="text-input-interface" class="media-interface">
            <div class="text-container">
              <div class="form-group">
                <input type="text" id="text-title" class="form-control" placeholder="Enter title for your text">
              </div>
              <div class="form-group">
                <textarea id="text-content" class="form-control text-area" placeholder="Type your Telugu text here..." rows="6"></textarea>
              </div>
              <div class="form-group">
                <textarea id="text-description" class="form-control" placeholder="Description (optional)" rows="3"></textarea>
              </div>
              <button id="submit-text" class="btn btn--primary btn--full-width">Submit Text</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Upload Progress Modal -->
    <div id="upload-modal" class="modal hidden">
      <div class="modal-content">
        <div class="upload-progress">
          <div class="progress-circle">
            <svg class="progress-ring" width="80" height="80">
              <circle class="progress-ring-circle" cx="40" cy="40" r="36"></circle>
            </svg>
            <span class="progress-text">0%</span>
          </div>
          <h3 id="upload-modal-title">Uploading Files...</h3>
          <p id="upload-modal-message">Please wait while we upload your files</p>
        </div>
      </div>
    </div>

    <!-- Notification -->
    <div id="notification" class="notification hidden">
      <div class="notification-content">
        <span id="notification-message"></span>
        <button id="notification-close">&times;</button>
      </div>
    </div>
  </div>
</Layout>

<script>
// Base configuration
const BASE_URL = 'https://backend2.swecha.org/api/v1';

// Global variables with proper typing
let currentUser: any = null;
let currentTopic: string = '';
let selectedFiles: File[] = [];
let isLoading = false;

// API Functions with proper error handling and typing
async function sendOTP(phone_number: string): Promise<any> {
  const res = await fetch(`${BASE_URL}/auth/send-otp`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ phone_number }),
  });
  
  if (!res.ok) {
    const error = await res.json();
    throw new Error(error.detail || 'Failed to send OTP');
  }
  
  return await res.json();
}

async function verifyOTP(phone_number: string, otp: string, action: string): Promise<any> {
  const res = await fetch(`${BASE_URL}/auth/verify-otp`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ phone_number, otp, action }),
  });
  
  if (!res.ok) {
    const error = await res.json();
    throw new Error(error.detail || 'OTP verification failed');
  }
  
  return await res.json();
}

async function loginWithPassword(phone_number: string, password: string): Promise<any> {
  const res = await fetch(`${BASE_URL}/auth/login`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ phone_number, password }),
  });
  
  if (!res.ok) {
    const error = await res.json();
    throw new Error(error.detail || 'Login failed');
  }
  
  return await res.json();
}

async function createUser(userData: any): Promise<any> {
  const res = await fetch(`${BASE_URL}/users/`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(userData),
  });
  
  if (!res.ok) {
    const error = await res.json();
    throw new Error(error.detail || 'User creation failed');
  }
  
  return await res.json();
}

async function uploadFile(file: File, topic: string, title?: string, description?: string): Promise<any> {
  const formData = new FormData();
  formData.append('file', file);
  formData.append('topic', topic);
  
  if (title) formData.append('title', title);
  if (description) formData.append('description', description);
  
  const fileType = file.type.split('/')[0];
  let mediaType: string;
  
  if (fileType === 'audio') mediaType = 'audio';
  else if (fileType === 'video') mediaType = 'video';
  else if (fileType === 'image') mediaType = 'image';
  else if (file.type === 'text/plain') mediaType = 'text';
  else throw new Error('Unsupported file type');
  
  formData.append('media_type', mediaType);
  
  const response = await fetch(`${BASE_URL}/records/upload`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${localStorage.getItem('authToken')}`
    },
    body: formData
  });
  
  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.detail || 'Upload failed');
  }
  
  return await response.json();
}

async function submitText(content: string, topic: string, title?: string, description?: string): Promise<any> {
  const textData = {
    content,
    topic,
    title: title || 'Text Submission',
    description: description || '',
    media_type: 'text'
  };
  
  const response = await fetch(`${BASE_URL}/records/`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${localStorage.getItem('authToken')}`
    },
    body: JSON.stringify(textData)
  });
  
  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.detail || 'Text submission failed');
  }
  
  return await response.json();
}

async function getUserStats(): Promise<any> {
  const response = await fetch(`${BASE_URL}/users/me/stats`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${localStorage.getItem('authToken')}`
    }
  });
  
  if (!response.ok) {
    throw new Error('Failed to load user statistics');
  }
  
  return await response.json();
}

// Utility Functions
function showScreen(screenId: string): void {
  const screens = document.querySelectorAll('.screen');
  screens.forEach(screen => {
    screen.classList.remove('active');
  });
  
  const targetScreen = document.getElementById(screenId);
  if (targetScreen) {
    targetScreen.classList.add('active');
  }
}

function showNotification(message: string, type: 'success' | 'error' = 'success'): void {
  const notification = document.getElementById('notification');
  const messageEl = document.getElementById('notification-message');
  
  if (notification && messageEl) {
    messageEl.textContent = message;
    notification.className = `notification ${type}`;
    notification.classList.remove('hidden');
    
    setTimeout(() => {
      notification.classList.add('hidden');
    }, 5000);
  }
}

function showUploadModal(title: string, message: string): void {
  const modal = document.getElementById('upload-modal');
  const titleEl = document.getElementById('upload-modal-title');
  const messageEl = document.getElementById('upload-modal-message');
  
  if (modal && titleEl && messageEl) {
    titleEl.textContent = title;
    messageEl.textContent = message;
    modal.classList.remove('hidden');
  }
}

function hideUploadModal(): void {
  const modal = document.getElementById('upload-modal');
  if (modal) {
    modal.classList.add('hidden');
  }
}

function updateUploadProgress(progress: number): void {
  const progressText = document.querySelector('.progress-text');
  const progressCircle = document.querySelector('.progress-ring-circle') as SVGCircleElement;
  
  if (progressText) {
    progressText.textContent = `${Math.round(progress)}%`;
  }
  
  if (progressCircle) {
    const circumference = 2 * Math.PI * 36;
    const offset = circumference - (progress / 100) * circumference;
    progressCircle.style.strokeDasharray = circumference.toString();
    progressCircle.style.strokeDashoffset = offset.toString();
  }
}

async function loadUserStats(): Promise<void> {
  try {
    const stats = await getUserStats();
    
    const audioCountEl = document.getElementById('audio-count');
    const videoCountEl = document.getElementById('video-count');
    const imageCountEl = document.getElementById('image-count');
    const textCountEl = document.getElementById('text-count');
    
    if (audioCountEl) audioCountEl.textContent = stats.audio_count || '0';
    if (videoCountEl) videoCountEl.textContent = stats.video_count || '0';
    if (imageCountEl) imageCountEl.textContent = stats.image_count || '0';
    if (textCountEl) textCountEl.textContent = stats.text_count || '0';
  } catch (error) {
    console.error('Failed to load user stats:', error);
  }
}

// Form Data Extraction with proper typing
function getFormData(formId: string): any {
  const form = document.getElementById(formId) as HTMLFormElement;
  if (!form) return {};
  
  const formData: any = {};
  const formElements = form.elements;
  
  for (let i = 0; i < formElements.length; i++) {
    const element = formElements[i] as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;
    
    if (element.name || element.id) {
      const key = element.name || element.id;
      
      if (element.type === 'checkbox') {
        formData[key] = (element as HTMLInputElement).checked;
      } else if (element.type !== 'submit' && element.type !== 'button') {
        formData[key] = element.value;
      }
    }
  }
  
  return formData;
}

// Event Listeners and Initialization
document.addEventListener('DOMContentLoaded', () => {
  // Initialize app
  setTimeout(() => {
    showScreen('signin');
  }, 2000);

  // Method selector functionality
  const otpMethodBtn = document.getElementById('otp-method-btn');
  const passwordMethodBtn = document.getElementById('password-method-btn');
  const otpForm = document.getElementById('signin-form');
  const passwordForm = document.getElementById('password-signin-form');

  otpMethodBtn?.addEventListener('click', () => {
    if (otpMethodBtn && passwordMethodBtn && otpForm && passwordForm) {
      otpMethodBtn.classList.add('active');
      passwordMethodBtn.classList.remove('active');
      otpForm.classList.remove('hidden');
      passwordForm.classList.add('hidden');
    }
  });

  passwordMethodBtn?.addEventListener('click', () => {
    if (otpMethodBtn && passwordMethodBtn && otpForm && passwordForm) {
      passwordMethodBtn.classList.add('active');
      otpMethodBtn.classList.remove('active');
      passwordForm.classList.remove('hidden');
      otpForm.classList.add('hidden');
    }
  });

  // OTP Login Form
  document.getElementById('signin-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = getFormData('signin-form');
    
    if (!formData.phone || !(formData.phone as string).trim()) {
      showNotification('Please enter your phone number', 'error');
      return;
    }

    try {
      isLoading = true;
      const response = await sendOTP(formData.phone as string);
      
      if (response.success) {
        currentUser = { 
          phone: formData.phone as string, 
          action: 'signin' as string 
        };
        
        const phoneDisplay = document.getElementById('otp-phone-display');
        if (phoneDisplay) {
          phoneDisplay.textContent = formData.phone as string;
        }
        
        showScreen('otp');
      }
    } catch (error: any) {
      showNotification(error.message, 'error');
    } finally {
      isLoading = false;
    }
  });

  // Password Login Form
  document.getElementById('password-signin-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = getFormData('password-signin-form');
    
    if (!formData.phone || !formData.password) {
      showNotification('Please enter both phone number and password', 'error');
      return;
    }

    try {
      isLoading = true;
      const response = await loginWithPassword(formData.phone as string, formData.password as string);
      
      if (response.success) {
        localStorage.setItem('authToken', response.access_token);
        currentUser = { 
          phone: formData.phone as string, 
          action: 'signin' as string 
        };
        showScreen('dashboard');
        await loadUserStats();
      }
    } catch (error: any) {
      showNotification(error.message, 'error');
    } finally {
      isLoading = false;
    }
  });

  // Create Account Form
  document.getElementById('create-account-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = getFormData('create-account-form');
    
    // Validation
    if (!formData.phone || !formData.name || !formData.email || !formData.gender || !formData.dob || !formData.location || !formData.password || !formData.confirmPassword || !formData.consent) {
      showNotification('Please fill in all fields and accept the terms', 'error');
      return;
    }

    if (formData.password !== formData.confirmPassword) {
      showNotification('Passwords do not match', 'error');
      return;
    }

    const userData = {
      phone_number: formData.phone as string,
      name: formData.name as string,
      email: formData.email as string,
      gender: formData.gender as string,
      dob: formData.dob as string,
      place: formData.location as string,
      password: formData.password as string,
      user_consent: formData.consent as boolean
    };

    try {
      isLoading = true;
      const otpResponse = await sendOTP(formData.phone as string);
      
      if (otpResponse.success) {
        currentUser = { 
          ...userData, 
          action: 'signup' as string 
        };
        
        const phoneDisplay = document.getElementById('otp-phone-display');
        if (phoneDisplay) {
          phoneDisplay.textContent = formData.phone as string;
        }
        
        showScreen('otp');
      }
    } catch (error: any) {
      showNotification(error.message, 'error');
    } finally {
      isLoading = false;
    }
  });

  // OTP Form
  document.getElementById('otp-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = getFormData('otp-form');
    
    if (!formData.otp || !currentUser.phone) {
      showNotification('Please enter the OTP', 'error');
      return;
    }

    try {
      isLoading = true;
      const response = await verifyOTP(currentUser.phone as string, formData.otp as string, currentUser.sessionToken || currentUser.action as string);
      
      if (response.success) {
        if (currentUser.action === 'signup') {
          // Create user account
          try {
            await createUser(currentUser);
            showScreen('success');
          } catch (createError: any) {
            showNotification('Account creation failed: ' + createError.message, 'error');
          }
        } else {
          // Login successful
          localStorage.setItem('authToken', response.access_token);
          showScreen('dashboard');
          await loadUserStats();
        }
      }
    } catch (error: any) {
      showNotification(error.message, 'error');
    } finally {
      isLoading = false;
    }
  });

  // Navigation
  document.getElementById('go-to-create')?.addEventListener('click', (e) => {
    e.preventDefault();
    showScreen('create-account');
  });

  document.getElementById('go-to-signin')?.addEventListener('click', (e) => {
    e.preventDefault();
    showScreen('signin');
  });

  document.getElementById('go-to-dashboard')?.addEventListener('click', () => {
    showScreen('dashboard');
    loadUserStats();
  });

  document.getElementById('logout-btn')?.addEventListener('click', () => {
    localStorage.removeItem('authToken');
    currentUser = null;
    showScreen('signin');
  });

  // Resend OTP functionality
  let resendTimer = 0;
  const resendBtn = document.getElementById('resend-otp');
  
  resendBtn?.addEventListener('click', async (e) => {
    e.preventDefault();
    
    if (resendTimer > 0) return;
    
    const originalText = (e.target as HTMLElement)?.textContent || '';
    (e.target as HTMLElement).textContent = 'Sending...';
    (e.target as HTMLElement).style.pointerEvents = 'none';
    
    try {
      await sendOTP(currentUser.phone as string);
      showNotification('OTP sent successfully', 'success');
      
      resendTimer = 30;
      const countdown = setInterval(() => {
        if (resendBtn) {
          (resendBtn as HTMLElement).textContent = `Resend (${resendTimer}s)`;
        }
        
        resendTimer--;
        
        if (resendTimer < 0) {
          clearInterval(countdown);
          if (resendBtn) {
            (resendBtn as HTMLElement).textContent = originalText;
            (resendBtn as HTMLElement).style.pointerEvents = 'auto';
          }
        }
      }, 1000);
      
    } catch (error: any) {
      if (resendBtn) {
        (resendBtn as HTMLElement).textContent = originalText;
        (resendBtn as HTMLElement).style.pointerEvents = 'auto';
      }
      showNotification('Failed to resend OTP', 'error');
    }
  });

  // OTP Input Navigation
  const otpInputs = document.querySelectorAll('.otp-input');
  otpInputs.forEach((input, index) => {
    const inputElement = input as HTMLInputElement;
    
    inputElement.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      if (target && target.value.length === 1 && index < otpInputs.length - 1) {
        const nextInput = otpInputs[index + 1] as HTMLInputElement;
        nextInput.focus();
      }
      
      // Auto-submit when all fields are filled
      const allFilled = Array.from(otpInputs).every(inp => (inp as HTMLInputElement).value.length === 1);
      if (allFilled) {
        const otpForm = document.getElementById('otp-form') as HTMLFormElement;
        if (otpForm) {
          const otpValue = Array.from(otpInputs).map(inp => (inp as HTMLInputElement).value).join('');
          // Create hidden input for form data
          let hiddenInput = document.getElementById('otp-hidden') as HTMLInputElement;
          if (!hiddenInput) {
            hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.id = 'otp-hidden';
            hiddenInput.name = 'otp';
            otpForm.appendChild(hiddenInput);
          }
          hiddenInput.value = otpValue;
          otpForm.dispatchEvent(new Event('submit'));
        }
      }
    });

    inputElement.addEventListener('keydown', (e) => {
      const keyboardEvent = e as KeyboardEvent;
      if (keyboardEvent.key === 'Backspace' && !(e.target as HTMLInputElement)?.value && index > 0) {
        const prevInput = otpInputs[index - 1] as HTMLInputElement;
        prevInput.focus();
      }
    });
  });

  // Topic Selection
  document.querySelectorAll('.topic-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const element = e.target as HTMLElement;
      
      // Remove active class from all topic buttons
      document.querySelectorAll('.topic-btn').forEach(b => b.classList.remove('active'));
      
      // Add active class to clicked button
      element.classList.add('active');
      
      // Set current topic
      const topicElement = element as HTMLElement;
      if (topicElement.dataset.topic) {
        currentTopic = topicElement.dataset.topic;
      }
    });
  });

  // Media Tab Switching
  document.querySelectorAll('.media-tab').forEach(tab => {
    tab.addEventListener('click', (e) => {
      const element = e.target as HTMLElement;
      const tabType = element.dataset.type;
      
      // Remove active class from all tabs
      document.querySelectorAll('.media-tab').forEach(t => t.classList.remove('active'));
      element.classList.add('active');
      
      // Hide all interfaces
      document.querySelectorAll('.media-interface').forEach(iface => {
        iface.classList.remove('active');
      });
      
      // Show selected interface
      if (tabType === 'upload') {
        const uploadInterface = document.getElementById('file-upload-interface');
        if (uploadInterface) {
          uploadInterface.classList.add('active');
        }
      } else if (tabType === 'text') {
        const textInterface = document.getElementById('text-input-interface');
        if (textInterface) {
          textInterface.classList.add('active');
        }
      }
    });
  });

  // File Upload Functionality
  const uploadZone = document.getElementById('upload-zone');
  const fileInput = document.getElementById('file-input') as HTMLInputElement;
  const filePreview = document.getElementById('file-preview');
  const uploadBtn = document.getElementById('upload-selected-files');

  // Click to select files
  uploadZone?.addEventListener('click', () => {
    fileInput?.click();
  });

  // Drag and drop
  uploadZone?.addEventListener('dragover', (e) => {
    e.preventDefault();
    if (uploadZone) {
      uploadZone.classList.add('drag-over');
    }
  });

  uploadZone?.addEventListener('dragleave', () => {
    if (uploadZone) {
      uploadZone.classList.remove('drag-over');
    }
  });

  uploadZone?.addEventListener('drop', (e) => {
    e.preventDefault();
    if (uploadZone) {
      uploadZone.classList.remove('drag-over');
    }
    
    const files = (e as DragEvent).dataTransfer?.files;
    if (files) {
      handleFileSelection(Array.from(files));
    }
  });

  // File input change
  fileInput?.addEventListener('change', (e) => {
    const target = e.target as HTMLInputElement;
    if (target && target.files) {
      handleFileSelection(Array.from(target.files));
    }
  });

  function handleFileSelection(files: File[]): void {
    selectedFiles = files;
    displayFilePreview(files);
    
    if (uploadBtn) {
      uploadBtn.classList.remove('hidden');
    }
  }

  function displayFilePreview(files: File[]): void {
    if (!filePreview) return;
    
    filePreview.innerHTML = '';
    
    files.forEach((file, index) => {
      const fileItem = document.createElement('div');
      fileItem.className = 'file-item';
      fileItem.innerHTML = `
        <div class="file-info">
          <span class="file-name">${file.name}</span>
          <span class="file-size">${(file.size / 1024 / 1024).toFixed(2)} MB</span>
        </div>
        <button class="remove-file" onclick="removeFile(${index})">×</button>
      `;
      filePreview.appendChild(fileItem);
    });
  }

  // Upload selected files
  uploadBtn?.addEventListener('click', async () => {
    if (selectedFiles.length === 0) {
      showNotification('Please select files to upload', 'error');
      return;
    }

    if (!currentTopic) {
      showNotification('Please select a topic first', 'error');
      return;
    }

    showUploadModal('Uploading Files...', 'Please wait while we upload your files');

    try {
      for (let i = 0; i < selectedFiles.length; i++) {
        const progress = ((i + 1) / selectedFiles.length) * 100;
        updateUploadProgress(progress);
        
        await uploadFile(selectedFiles[i], currentTopic);
      }
      
      hideUploadModal();
      showNotification('All files uploaded successfully!', 'success');
      
      // Reset
      selectedFiles = [];
      if (filePreview) {
        filePreview.innerHTML = '';
      }
      if (uploadBtn) {
        uploadBtn.classList.add('hidden');
      }
      if (fileInput) {
        fileInput.value = '';
      }
      
      await loadUserStats();
      
    } catch (error: any) {
      hideUploadModal();
      showNotification('Upload failed: ' + error.message, 'error');
    }
  });

  // Text Submission
  document.getElementById('submit-text')?.addEventListener('click', async () => {
    const titleInput = document.getElementById('text-title') as HTMLInputElement;
    const contentInput = document.getElementById('text-content') as HTMLTextAreaElement;
    const descriptionInput = document.getElementById('text-description') as HTMLTextAreaElement;
    
    const title = titleInput?.value.trim();
    const content = contentInput?.value.trim();
    const description = descriptionInput?.value.trim();

    if (!content) {
      showNotification('Please enter some text content', 'error');
      return;
    }

    if (!currentTopic) {
      showNotification('Please select a topic first', 'error');
      return;
    }

    try {
      showUploadModal('Submitting Text...', 'Please wait while we process your text');
      
      await submitText(content, currentTopic, title, description);
      
      hideUploadModal();
      showNotification('Text submitted successfully!', 'success');
      
      // Clear form
      if (titleInput) titleInput.value = '';
      if (contentInput) contentInput.value = '';
      if (descriptionInput) descriptionInput.value = '';
      
      await loadUserStats();
      
    } catch (error: any) {
      hideUploadModal();
      showNotification('Text submission failed: ' + error.message, 'error');
    }
  });

  // Notification close
  document.getElementById('notification-close')?.addEventListener('click', () => {
    const notification = document.getElementById('notification');
    if (notification) {
      notification.classList.add('hidden');
    }
  });

  // Check for existing auth token
  const authToken = localStorage.getItem('authToken');
  if (authToken) {
    // Auto-login if token exists
    setTimeout(() => {
      showScreen('dashboard');
      loadUserStats();
    }, 2000);
  }
});

// Global function for removing files (called from HTML)
function removeFile(index: number): void {
  selectedFiles.splice(index, 1);
  
  const filePreview = document.getElementById('file-preview');
  const uploadBtn = document.getElementById('upload-selected-files');
  
  if (filePreview) {
    const fileItems = filePreview.children;
    if (fileItems[index]) {
      fileItems[index].remove();
    }
  }
  
  if (selectedFiles.length === 0 && uploadBtn) {
    uploadBtn.classList.add('hidden');
  }
}

// Ripple effect for buttons
document.addEventListener('click', (e) => {
  const target = e.target as HTMLElement;
  if (target && target.classList.contains('ripple')) {
    const rect = target.getBoundingClientRect();
    const x = (e as MouseEvent).clientX - rect.left;
    const y = (e as MouseEvent).clientY - rect.top;
    
    const ripple = document.createElement('span');
    ripple.className = 'ripple-effect';
    ripple.style.left = x + 'px';
    ripple.style.top = y + 'px';
    
    target.appendChild(ripple);
    
    setTimeout(() => {
      ripple.remove();
    }, 600);
  }
});
</script>
</Layout>
Complete Corrected Dashboard.astro File
text
---
// Dashboard.astro - Complete file upload dashboard
---

<div id="dashboard-content" class="dashboard-content">
  <div class="dashboard-header">
    <div class="user-profile">
      <div class="profile-icon small">
        <svg width="40" height="40" viewBox="0 0 80 80" fill="none">
          <circle cx="40" cy="40" r="38" fill="#2196F3" stroke="#fff" stroke-width="4"/>
          <circle cx="40" cy="30" r="12" fill="#fff"/>
          <path d="M20 60c0-11 9-20 20-20s20 9 20 20" fill="#fff"/>
        </svg>
      </div>
      <div class="user-info">
        <h3 id="user-name">Welcome User</h3>
        <p id="user-phone"></p>
      </div>
    </div>
    <button id="logout-btn" class="btn btn--secondary">Logout</button>
  </div>

  <div class="stats-container">
    <div class="stat-card">
      <div class="stat-number" id="audio-count">0</div>
      <div class="stat-label">Audio Files</div>
    </div>
    <div class="stat-card">
      <div class="stat-number" id="video-count">0</div>
      <div class="stat-label">Video Files</div>
    </div>
    <div class="stat-card">
      <div class="stat-number" id="image-count">0</div>
      <div class="stat-label">Images</div>
    </div>
    <div class="stat-card">
      <div class="stat-number" id="text-count">0</div>
      <div class="stat-label">Text Records</div>
    </div>
  </div>

  <div class="topics-container">
    <h3>Select a Topic</h3>
    <div class="topics-grid">
      <button class="topic-btn" data-topic="health">Health</button>
      <button class="topic-btn" data-topic="education">Education</button>
      <button class="topic-btn" data-topic="technology">Technology</button>
      <button class="topic-btn" data-topic="agriculture">Agriculture</button>
      <button class="topic-btn" data-topic="business">Business</button>
      <button class="topic-btn" data-topic="general">General</button>
    </div>
  </div>

  <div class="media-container">
    <div class="media-tabs">
      <button class="media-tab active" data-type="upload">File Upload</button>
      <button class="media-tab" data-type="text">Text Input</button>
    </div>

    <!-- File Upload Interface -->
    <div id="file-upload-interface" class="media-interface active">
      <div class="upload-container">
        <div class="upload-zone" id="upload-zone">
          <div class="upload-icon">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M17 8l-5-5-5 5M12 3v12" stroke="currentColor" stroke-width="2"/>
            </svg>
          </div>
          <p class="upload-text">Click to select files or drag and drop</p>
          <p class="upload-subtitle">Supports: Audio (MP3, WAV), Video (MP4), Images (JPG, PNG), Text (TXT)</p>
          <input type="file" id="file-input" multiple accept=".mp3,.wav,.mp4,.jpg,.jpeg,.png,.txt" class="hidden">
        </div>
        
        <div class="file-preview" id="file-preview"></div>
        
        <button id="upload-selected-files" class="btn btn--primary upload-btn hidden">
          Upload Selected Files
        </button>
      </div>
    </div>

    <!-- Text Input Interface -->
    <div id="text-input-interface" class="media-interface">
      <div class="text-container">
        <div class="form-group">
          <input type="text" id="text-title" class="form-control" placeholder="Enter title for your text">
        </div>
        <div class="form-group">
          <textarea id="text-content" class="form-control text-area" placeholder="Type your Telugu text here..." rows="6"></textarea>
        </div>
        <div class="form-group">
          <textarea id="text-description" class="form-control" placeholder="Description (optional)" rows="3"></textarea>
        </div>
        <button id="submit-text" class="btn btn--primary btn--full-width">Submit Text</button>
      </div>
    </div>
  </div>
</div>

<script>
// Dashboard-specific TypeScript code with proper typing
const dashboardConfig = {
  maxFileSize: 50 * 1024 * 1024, // 50MB
  allowedTypes: [
    'audio/mp3', 'audio/wav', 'audio/mpeg',
    'video/mp4', 'video/avi', 'video/mov',
    'image/jpeg', 'image/jpg', 'image/png', 'image/gif',
    'text/plain'
  ]
};

// Dashboard initialization
function initializeDashboard(): void {
  loadDashboardData();
  setupEventListeners();
}

async function loadDashboardData(): Promise<void> {
  try {
    const userProfile = await getCurrentUserProfile();
    updateUserDisplay(userProfile);
    
    const stats = await getUserStatistics();
    updateStatsDisplay(stats);
  } catch (error) {
    console.error('Failed to load dashboard data:', error);
  }
}

async function getCurrentUserProfile(): Promise<any> {
  const response = await fetch(`${BASE_URL}/users/me`, {
    headers: {
      'Authorization': `Bearer ${localStorage.getItem('authToken')}`
    }
  });
  
  if (!response.ok) {
    throw new Error('Failed to load user profile');
  }
  
  return await response.json();
}

async function getUserStatistics(): Promise<any> {
  const response = await fetch(`${BASE_URL}/users/me/stats`, {
    headers: {
      'Authorization': `Bearer ${localStorage.getItem('authToken')}`
    }
  });
  
  if (!response.ok) {
    throw new Error('Failed to load user statistics');
  }
  
  return await response.json();
}

function updateUserDisplay(user: any): void {
  const userNameEl = document.getElementById('user-name');
  const userPhoneEl = document.getElementById('user-phone');
  
  if (userNameEl && user.name) {
    userNameEl.textContent = `Welcome, ${user.name}`;
  }
  
  if (userPhoneEl && user.phone_number) {
    userPhoneEl.textContent = user.phone_number;
  }
}

function updateStatsDisplay(stats: any): void {
  const audioCountEl = document.getElementById('audio-count');
  const videoCountEl = document.getElementById('video-count');
  const imageCountEl = document.getElementById('image-count');
  const textCountEl = document.getElementById('text-count');
  
  if (audioCountEl) audioCountEl.textContent = stats.audio_count?.toString() || '0';
  if (videoCountEl) videoCountEl.textContent = stats.video_count?.toString() || '0';
  if (imageCountEl) imageCountEl.textContent = stats.image_count?.toString() || '0';
  if (textCountEl) textCountEl.textContent = stats.text_count?.toString() || '0';
}

function setupEventListeners(): void {
  // File upload event listeners are already set up in the main index.astro file
  // This function can be extended for dashboard-specific functionality
  
  // Example: Add keyboard shortcuts for dashboard
  document.addEventListener('keydown', (e: KeyboardEvent) => {
    if (e.ctrlKey) {
      switch (e.key) {
        case '1':
          e.preventDefault();
          switchToTab('upload');
          break;
        case '2':
          e.preventDefault();
          switchToTab('text');
          break;
      }
    }
  });
}

function switchToTab(tabType: string): void {
  const uploadTab = document.querySelector('[data-type="upload"]');
  const textTab = document.querySelector('[data-type="text"]');
  const uploadInterface = document.getElementById('file-upload-interface');
  const textInterface = document.getElementById('text-input-interface');
  
  // Remove active classes
  document.querySelectorAll('.media-tab').forEach(tab => {
    tab.classList.remove('active');
  });
  
  document.querySelectorAll('.media-interface').forEach(iface => {
    iface.classList.remove('active');
  });
  
  // Add active classes based on tab type
  if (tabType === 'upload' && uploadTab && uploadInterface) {
    uploadTab.classList.add('active');
    uploadInterface.classList.add('active');
  } else if (tabType === 'text' && textTab && textInterface) {
    textTab.classList.add('active');
    textInterface.classList.add('active');
  }
}

// File validation function
function validateFile(file: File): { valid: boolean; error?: string } {
  if (file.size > dashboardConfig.maxFileSize) {
    return {
      valid: false,
      error: `File size must be less than ${dashboardConfig.maxFileSize / 1024 / 1024}MB`
    };
  }
  
  if (!dashboardConfig.allowedTypes.includes(file.type)) {
    return {
      valid: false,
      error: 'File type not supported'
    };
  }
  
  return { valid: true };
}

// Enhanced file handling with validation
function handleValidatedFileSelection(files: File[]): void {
  const validFiles: File[] = [];
  const errors: string[] = [];
  
  files.forEach(file => {
    const validation = validateFile(file);
    if (validation.valid) {
      validFiles.push(file);
    } else {
      errors.push(`${file.name}: ${validation.error}`);
    }
  });
  
  if (errors.length > 0) {
    showNotification(`Some files were rejected: ${errors.join(', ')}`, 'error');
  }
  
  if (validFiles.length > 0) {
    selectedFiles = validFiles;
    displayFilePreview(validFiles);
    
    const uploadBtn = document.getElementById('upload-selected-files');
    if (uploadBtn) {
      uploadBtn.classList.remove('hidden');
    }
  }
}

// Initialize dashboard when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  // Check if we're on the dashboard
  const dashboardElement = document.getElementById('dashboard');
  if (dashboardElement && dashboardElement.classList.contains('active')) {
    initializeDashboard();
  }
});
</script>