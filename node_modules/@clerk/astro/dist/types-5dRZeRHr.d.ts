import { Clerk, Without, ClerkOptions, ClientResource, MultiDomainAndOrProxyPrimitives, OrganizationCustomRoleKey, OrganizationCustomPermissionKey, CheckAuthorizationWithCustomPermissions } from '@clerk/types';

type AstroClerkUpdateOptions = Pick<ClerkOptions, 'appearance' | 'localization'>;
type AstroClerkIntegrationParams = Without<ClerkOptions, 'isSatellite' | 'sdkMetadata' | 'standardBrowser' | 'selectInitialSession' | 'routerReplace' | 'routerDebug' | 'routerPush' | 'polling' | 'touchSession'> & MultiDomainAndOrProxyPrimitives;
interface HeadlessBrowserClerk extends Clerk {
    load: (opts?: Without<ClerkOptions, 'isSatellite'>) => Promise<void>;
    updateClient: (client: ClientResource) => void;
}
interface BrowserClerk extends HeadlessBrowserClerk {
    onComponentsReady: Promise<void>;
    components: any;
}
declare global {
    interface Window {
        __astro_clerk_component_props: Map<string, Map<string, Record<string, unknown>>>;
        __astro_clerk_function_props: Map<string, Map<string, Record<string, unknown>>>;
        Clerk: BrowserClerk;
    }
}
type ProtectProps = {
    condition?: never;
    role: OrganizationCustomRoleKey;
    permission?: never;
} | {
    condition?: never;
    role?: never;
    permission: OrganizationCustomPermissionKey;
} | {
    condition: (has: CheckAuthorizationWithCustomPermissions) => boolean;
    role?: never;
    permission?: never;
} | {
    condition?: never;
    role?: never;
    permission?: never;
};

export type { AstroClerkIntegrationParams as A, ProtectProps as P, AstroClerkUpdateOptions as a };
